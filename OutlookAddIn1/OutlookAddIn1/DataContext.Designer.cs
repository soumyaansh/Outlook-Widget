//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 03-03-2016 19:21:32
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace UserContext
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class UserDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(UserDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertComment(Comment instance);
        partial void UpdateComment(Comment instance);
        partial void DeleteComment(Comment instance);
        partial void InsertContact(Contact instance);
        partial void UpdateContact(Contact instance);
        partial void DeleteContact(Contact instance);
        partial void InsertContentExpiry(ContentExpiry instance);
        partial void UpdateContentExpiry(ContentExpiry instance);
        partial void DeleteContentExpiry(ContentExpiry instance);
        partial void InsertDoc(Doc instance);
        partial void UpdateDoc(Doc instance);
        partial void DeleteDoc(Doc instance);
        partial void InsertEventRecord(EventRecord instance);
        partial void UpdateEventRecord(EventRecord instance);
        partial void DeleteEventRecord(EventRecord instance);
        partial void InsertFolder(Folder instance);
        partial void UpdateFolder(Folder instance);
        partial void DeleteFolder(Folder instance);
        partial void InsertGroupContact(GroupContact instance);
        partial void UpdateGroupContact(GroupContact instance);
        partial void DeleteGroupContact(GroupContact instance);
        partial void InsertGroup(Group instance);
        partial void UpdateGroup(Group instance);
        partial void DeleteGroup(Group instance);
        partial void InsertNotificationAction(NotificationAction instance);
        partial void UpdateNotificationAction(NotificationAction instance);
        partial void DeleteNotificationAction(NotificationAction instance);
        partial void InsertNotification(Notification instance);
        partial void UpdateNotification(Notification instance);
        partial void DeleteNotification(Notification instance);
        partial void InsertPackage(Package instance);
        partial void UpdatePackage(Package instance);
        partial void DeletePackage(Package instance);
        partial void InsertPackageFeature(PackageFeature instance);
        partial void UpdatePackageFeature(PackageFeature instance);
        partial void DeletePackageFeature(PackageFeature instance);
        partial void InsertSocialmedia(Socialmedia instance);
        partial void UpdateSocialmedia(Socialmedia instance);
        partial void DeleteSocialmedia(Socialmedia instance);
        partial void InsertTaggroup(Taggroup instance);
        partial void UpdateTaggroup(Taggroup instance);
        partial void DeleteTaggroup(Taggroup instance);
        partial void InsertTag(Tag instance);
        partial void UpdateTag(Tag instance);
        partial void DeleteTag(Tag instance);
        partial void InsertTopWit(TopWit instance);
        partial void UpdateTopWit(TopWit instance);
        partial void DeleteTopWit(TopWit instance);
        partial void InsertUserDefault(UserDefault instance);
        partial void UpdateUserDefault(UserDefault instance);
        partial void DeleteUserDefault(UserDefault instance);
        partial void InsertUserPackage(UserPackage instance);
        partial void UpdateUserPackage(UserPackage instance);
        partial void DeleteUserPackage(UserPackage instance);
        partial void InsertWitAttachment(WitAttachment instance);
        partial void UpdateWitAttachment(WitAttachment instance);
        partial void DeleteWitAttachment(WitAttachment instance);
        partial void InsertWitTag(WitTag instance);
        partial void UpdateWitTag(WitTag instance);
        partial void DeleteWitTag(WitTag instance);
        partial void InsertWit(Wit instance);
        partial void UpdateWit(Wit instance);
        partial void DeleteWit(Wit instance);
        partial void InsertWitsUsage(WitsUsage instance);
        partial void UpdateWitsUsage(WitsUsage instance);
        partial void DeleteWitsUsage(WitsUsage instance);
        partial void InsertWitsusagegraphDatum(WitsusagegraphDatum instance);
        partial void UpdateWitsusagegraphDatum(WitsusagegraphDatum instance);
        partial void DeleteWitsusagegraphDatum(WitsusagegraphDatum instance);
        partial void InsertWitsUsagegraph(WitsUsagegraph instance);
        partial void UpdateWitsUsagegraph(WitsUsagegraph instance);
        partial void DeleteWitsUsagegraph(WitsUsagegraph instance);
        partial void InsertUserworkspace(Userworkspace instance);
        partial void UpdateUserworkspace(Userworkspace instance);
        partial void DeleteUserworkspace(Userworkspace instance);
        partial void InsertCreatedby(Createdby instance);
        partial void UpdateCreatedby(Createdby instance);
        partial void DeleteCreatedby(Createdby instance);
        partial void InsertModifiedby(Modifiedby instance);
        partial void UpdateModifiedby(Modifiedby instance);
        partial void DeleteModifiedby(Modifiedby instance);
        partial void InsertPermission(Permission instance);
        partial void UpdatePermission(Permission instance);
        partial void DeletePermission(Permission instance);

        #endregion

        public UserDataContext() :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public UserDataContext(MappingSource mappingSource) :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public UserDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public UserDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public UserDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public UserDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Comment> Comments
        {
            get
            {
                return this.GetTable<Comment>();
            }
        }

        public Devart.Data.Linq.Table<Contact> Contacts
        {
            get
            {
                return this.GetTable<Contact>();
            }
        }

        public Devart.Data.Linq.Table<ContentExpiry> ContentExpiries
        {
            get
            {
                return this.GetTable<ContentExpiry>();
            }
        }

        public Devart.Data.Linq.Table<Doc> Docs
        {
            get
            {
                return this.GetTable<Doc>();
            }
        }

        public Devart.Data.Linq.Table<EventRecord> EventRecords
        {
            get
            {
                return this.GetTable<EventRecord>();
            }
        }

        public Devart.Data.Linq.Table<Folder> Folders
        {
            get
            {
                return this.GetTable<Folder>();
            }
        }

        public Devart.Data.Linq.Table<GroupContact> GroupContacts
        {
            get
            {
                return this.GetTable<GroupContact>();
            }
        }

        public Devart.Data.Linq.Table<Group> Groups
        {
            get
            {
                return this.GetTable<Group>();
            }
        }

        public Devart.Data.Linq.Table<NotificationAction> NotificationActions
        {
            get
            {
                return this.GetTable<NotificationAction>();
            }
        }

        public Devart.Data.Linq.Table<Notification> Notifications
        {
            get
            {
                return this.GetTable<Notification>();
            }
        }

        public Devart.Data.Linq.Table<Package> Packages
        {
            get
            {
                return this.GetTable<Package>();
            }
        }

        public Devart.Data.Linq.Table<PackageFeature> PackageFeatures
        {
            get
            {
                return this.GetTable<PackageFeature>();
            }
        }

        public Devart.Data.Linq.Table<Socialmedia> Socialmedias
        {
            get
            {
                return this.GetTable<Socialmedia>();
            }
        }

        public Devart.Data.Linq.Table<Taggroup> Taggroups
        {
            get
            {
                return this.GetTable<Taggroup>();
            }
        }

        public Devart.Data.Linq.Table<Tag> Tags
        {
            get
            {
                return this.GetTable<Tag>();
            }
        }

        public Devart.Data.Linq.Table<TopWit> TopWits
        {
            get
            {
                return this.GetTable<TopWit>();
            }
        }

        public Devart.Data.Linq.Table<UserDefault> UserDefaults
        {
            get
            {
                return this.GetTable<UserDefault>();
            }
        }

        public Devart.Data.Linq.Table<UserPackage> UserPackages
        {
            get
            {
                return this.GetTable<UserPackage>();
            }
        }

        public Devart.Data.Linq.Table<WitAttachment> WitAttachments
        {
            get
            {
                return this.GetTable<WitAttachment>();
            }
        }

        public Devart.Data.Linq.Table<WitTag> WitTags
        {
            get
            {
                return this.GetTable<WitTag>();
            }
        }

        public Devart.Data.Linq.Table<Wit> Wits
        {
            get
            {
                return this.GetTable<Wit>();
            }
        }

        public Devart.Data.Linq.Table<WitsUsage> WitsUsages
        {
            get
            {
                return this.GetTable<WitsUsage>();
            }
        }

        public Devart.Data.Linq.Table<WitsusagegraphDatum> WitsusagegraphData
        {
            get
            {
                return this.GetTable<WitsusagegraphDatum>();
            }
        }

        public Devart.Data.Linq.Table<WitsUsagegraph> WitsUsagegraphs
        {
            get
            {
                return this.GetTable<WitsUsagegraph>();
            }
        }

        public Devart.Data.Linq.Table<Userworkspace> Userworkspaces
        {
            get
            {
                return this.GetTable<Userworkspace>();
            }
        }

        public Devart.Data.Linq.Table<Createdby> Createdbies
        {
            get
            {
                return this.GetTable<Createdby>();
            }
        }

        public Devart.Data.Linq.Table<Modifiedby> Modifiedbies
        {
            get
            {
                return this.GetTable<Modifiedby>();
            }
        }

        public Devart.Data.Linq.Table<Permission> Permissions
        {
            get
            {
                return this.GetTable<Permission>();
            }
        }
    }
}

namespace UserContext
{

    /// <summary>
    /// There are no comments for UserContext.Comment in the schema.
    /// </summary>
    [Table(Name = @"""main"".comments")]
    public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CommentId;

        private string _Comment1;

        private string _WidgetId;

        private string _Creator;

        private string _CreationDate;

        private string _Modifier;

        private string _ModificationDate;

        private System.Nullable<long> _IsOwner = 0;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCommentIdChanging(string value);
        partial void OnCommentIdChanged();
        partial void OnComment1Changing(string value);
        partial void OnComment1Changed();
        partial void OnWidgetIdChanging(string value);
        partial void OnWidgetIdChanged();
        partial void OnCreatorChanging(string value);
        partial void OnCreatorChanged();
        partial void OnCreationDateChanging(string value);
        partial void OnCreationDateChanged();
        partial void OnModifierChanging(string value);
        partial void OnModifierChanged();
        partial void OnModificationDateChanging(string value);
        partial void OnModificationDateChanged();
        partial void OnIsOwnerChanging(System.Nullable<long> value);
        partial void OnIsOwnerChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        #endregion

        public Comment()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CommentId in the schema.
        /// </summary>
        [Column(Name = @"comment_id", Storage = "_CommentId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string CommentId
        {
            get
            {
                return this._CommentId;
            }
            set
            {
                if (this._CommentId != value)
                {
                    this.OnCommentIdChanging(value);
                    this.SendPropertyChanging();
                    this._CommentId = value;
                    this.SendPropertyChanged("CommentId");
                    this.OnCommentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment1 in the schema.
        /// </summary>
        [Column(Name = @"comment", Storage = "_Comment1", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Comment1
        {
            get
            {
                return this._Comment1;
            }
            set
            {
                if (this._Comment1 != value)
                {
                    this.OnComment1Changing(value);
                    this.SendPropertyChanging();
                    this._Comment1 = value;
                    this.SendPropertyChanged("Comment1");
                    this.OnComment1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WidgetId in the schema.
        /// </summary>
        [Column(Name = @"widget_id", Storage = "_WidgetId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string WidgetId
        {
            get
            {
                return this._WidgetId;
            }
            set
            {
                if (this._WidgetId != value)
                {
                    this.OnWidgetIdChanging(value);
                    this.SendPropertyChanging();
                    this._WidgetId = value;
                    this.SendPropertyChanged("WidgetId");
                    this.OnWidgetIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Creator in the schema.
        /// </summary>
        [Column(Name = @"creator", Storage = "_Creator", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Creator
        {
            get
            {
                return this._Creator;
            }
            set
            {
                if (this._Creator != value)
                {
                    this.OnCreatorChanging(value);
                    this.SendPropertyChanging();
                    this._Creator = value;
                    this.SendPropertyChanged("Creator");
                    this.OnCreatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreationDate in the schema.
        /// </summary>
        [Column(Name = @"creation_date", Storage = "_CreationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string CreationDate
        {
            get
            {
                return this._CreationDate;
            }
            set
            {
                if (this._CreationDate != value)
                {
                    this.OnCreationDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreationDate = value;
                    this.SendPropertyChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modifier in the schema.
        /// </summary>
        [Column(Name = @"modifier", Storage = "_Modifier", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Modifier
        {
            get
            {
                return this._Modifier;
            }
            set
            {
                if (this._Modifier != value)
                {
                    this.OnModifierChanging(value);
                    this.SendPropertyChanging();
                    this._Modifier = value;
                    this.SendPropertyChanged("Modifier");
                    this.OnModifierChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModificationDate in the schema.
        /// </summary>
        [Column(Name = @"modification_date", Storage = "_ModificationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ModificationDate
        {
            get
            {
                return this._ModificationDate;
            }
            set
            {
                if (this._ModificationDate != value)
                {
                    this.OnModificationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModificationDate = value;
                    this.SendPropertyChanged("ModificationDate");
                    this.OnModificationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsOwner in the schema.
        /// </summary>
        [Column(Name = @"is_owner", Storage = "_IsOwner", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsOwner
        {
            get
            {
                return this._IsOwner;
            }
            set
            {
                if (this._IsOwner != value)
                {
                    this.OnIsOwnerChanging(value);
                    this.SendPropertyChanging();
                    this._IsOwner = value;
                    this.SendPropertyChanged("IsOwner");
                    this.OnIsOwnerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Contact in the schema.
    /// </summary>
    [Table(Name = @"""main"".contacts")]
    public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Useremail;

        private string _UserFname;

        private string _UserLname;

        private string _Company;

        private System.Nullable<long> _EnterpriseId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUseremailChanging(string value);
        partial void OnUseremailChanged();
        partial void OnUserFnameChanging(string value);
        partial void OnUserFnameChanged();
        partial void OnUserLnameChanging(string value);
        partial void OnUserLnameChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnEnterpriseIdChanging(System.Nullable<long> value);
        partial void OnEnterpriseIdChanged();
        #endregion

        public Contact()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Useremail in the schema.
        /// </summary>
        [Column(Name = @"useremail", Storage = "_Useremail", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Useremail
        {
            get
            {
                return this._Useremail;
            }
            set
            {
                if (this._Useremail != value)
                {
                    this.OnUseremailChanging(value);
                    this.SendPropertyChanging();
                    this._Useremail = value;
                    this.SendPropertyChanged("Useremail");
                    this.OnUseremailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserFname in the schema.
        /// </summary>
        [Column(Name = @"user_fname", Storage = "_UserFname", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string UserFname
        {
            get
            {
                return this._UserFname;
            }
            set
            {
                if (this._UserFname != value)
                {
                    this.OnUserFnameChanging(value);
                    this.SendPropertyChanging();
                    this._UserFname = value;
                    this.SendPropertyChanged("UserFname");
                    this.OnUserFnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserLname in the schema.
        /// </summary>
        [Column(Name = @"user_lname", Storage = "_UserLname", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string UserLname
        {
            get
            {
                return this._UserLname;
            }
            set
            {
                if (this._UserLname != value)
                {
                    this.OnUserLnameChanging(value);
                    this.SendPropertyChanging();
                    this._UserLname = value;
                    this.SendPropertyChanged("UserLname");
                    this.OnUserLnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Name = @"company", Storage = "_Company", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnterpriseId in the schema.
        /// </summary>
        [Column(Name = @"enterprise_id", Storage = "_EnterpriseId", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> EnterpriseId
        {
            get
            {
                return this._EnterpriseId;
            }
            set
            {
                if (this._EnterpriseId != value)
                {
                    this.OnEnterpriseIdChanging(value);
                    this.SendPropertyChanging();
                    this._EnterpriseId = value;
                    this.SendPropertyChanged("EnterpriseId");
                    this.OnEnterpriseIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.ContentExpiry in the schema.
    /// </summary>
    [Table(Name = @"""main"".content_expiry")]
    public partial class ContentExpiry : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Id;

        private System.Nullable<long> _Type = 0;

        private string _ExpiryDate;

        private string _FirstAlertDate;

        private string _SecondAlertDate;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnTypeChanging(System.Nullable<long> value);
        partial void OnTypeChanged();
        partial void OnExpiryDateChanging(string value);
        partial void OnExpiryDateChanged();
        partial void OnFirstAlertDateChanging(string value);
        partial void OnFirstAlertDateChanged();
        partial void OnSecondAlertDateChanging(string value);
        partial void OnSecondAlertDateChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        #endregion

        public ContentExpiry()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExpiryDate in the schema.
        /// </summary>
        [Column(Name = @"expiry_date", Storage = "_ExpiryDate", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ExpiryDate
        {
            get
            {
                return this._ExpiryDate;
            }
            set
            {
                if (this._ExpiryDate != value)
                {
                    this.OnExpiryDateChanging(value);
                    this.SendPropertyChanging();
                    this._ExpiryDate = value;
                    this.SendPropertyChanged("ExpiryDate");
                    this.OnExpiryDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstAlertDate in the schema.
        /// </summary>
        [Column(Name = @"first_alert_date", Storage = "_FirstAlertDate", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FirstAlertDate
        {
            get
            {
                return this._FirstAlertDate;
            }
            set
            {
                if (this._FirstAlertDate != value)
                {
                    this.OnFirstAlertDateChanging(value);
                    this.SendPropertyChanging();
                    this._FirstAlertDate = value;
                    this.SendPropertyChanged("FirstAlertDate");
                    this.OnFirstAlertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SecondAlertDate in the schema.
        /// </summary>
        [Column(Name = @"second_alert_date", Storage = "_SecondAlertDate", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SecondAlertDate
        {
            get
            {
                return this._SecondAlertDate;
            }
            set
            {
                if (this._SecondAlertDate != value)
                {
                    this.OnSecondAlertDateChanging(value);
                    this.SendPropertyChanging();
                    this._SecondAlertDate = value;
                    this.SendPropertyChanged("SecondAlertDate");
                    this.OnSecondAlertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Doc in the schema.
    /// </summary>
    [Table(Name = @"""main"".docs")]
    public partial class Doc : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _DocId;

        private string _InlineId;

        private string _FileName;

        private string _MimeType;

        private string _FileUrl;

        private string _ThumbnailUrl;

        private System.Nullable<double> _Version = 0;

        private System.Nullable<long> _Size = 0;

        private string _Creator;

        private string _CreationDate;

        private string _Modifier;

        private string _Company;

        private string _ModificationDate;

        private string _Tags;

        private string _Notes;

        private string _WitIds;

        private string _LocalPath;

        private string _ContainerDirPath;

        private System.Nullable<long> _Permission = 0;

        private System.Nullable<long> _CanFurtherPerm = 0;

        private string _FolderId;

        private System.Nullable<long> _FolderType = 0;

        private System.Nullable<long> _WidgetType = 0;

        private System.Nullable<long> _IsInline = 0;

        private System.Nullable<long> _Label = 0;

        private System.Nullable<long> _IsFav = 0;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _Ratingtotal = 0;

        private System.Nullable<long> _Ratingcount = 0;

        private System.Nullable<long> _IsSharedbyme;

        private string _PublicUrl;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;

        private string _ModificationDateNew;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDocIdChanging(string value);
        partial void OnDocIdChanged();
        partial void OnInlineIdChanging(string value);
        partial void OnInlineIdChanged();
        partial void OnFileNameChanging(string value);
        partial void OnFileNameChanged();
        partial void OnMimeTypeChanging(string value);
        partial void OnMimeTypeChanged();
        partial void OnFileUrlChanging(string value);
        partial void OnFileUrlChanged();
        partial void OnThumbnailUrlChanging(string value);
        partial void OnThumbnailUrlChanged();
        partial void OnVersionChanging(System.Nullable<double> value);
        partial void OnVersionChanged();
        partial void OnSizeChanging(System.Nullable<long> value);
        partial void OnSizeChanged();
        partial void OnCreatorChanging(string value);
        partial void OnCreatorChanged();
        partial void OnCreationDateChanging(string value);
        partial void OnCreationDateChanged();
        partial void OnModifierChanging(string value);
        partial void OnModifierChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnModificationDateChanging(string value);
        partial void OnModificationDateChanged();
        partial void OnTagsChanging(string value);
        partial void OnTagsChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnWitIdsChanging(string value);
        partial void OnWitIdsChanged();
        partial void OnLocalPathChanging(string value);
        partial void OnLocalPathChanged();
        partial void OnContainerDirPathChanging(string value);
        partial void OnContainerDirPathChanged();
        partial void OnPermissionChanging(System.Nullable<long> value);
        partial void OnPermissionChanged();
        partial void OnCanFurtherPermChanging(System.Nullable<long> value);
        partial void OnCanFurtherPermChanged();
        partial void OnFolderIdChanging(string value);
        partial void OnFolderIdChanged();
        partial void OnFolderTypeChanging(System.Nullable<long> value);
        partial void OnFolderTypeChanged();
        partial void OnWidgetTypeChanging(System.Nullable<long> value);
        partial void OnWidgetTypeChanged();
        partial void OnIsInlineChanging(System.Nullable<long> value);
        partial void OnIsInlineChanged();
        partial void OnLabelChanging(System.Nullable<long> value);
        partial void OnLabelChanged();
        partial void OnIsFavChanging(System.Nullable<long> value);
        partial void OnIsFavChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnRatingtotalChanging(System.Nullable<long> value);
        partial void OnRatingtotalChanged();
        partial void OnRatingcountChanging(System.Nullable<long> value);
        partial void OnRatingcountChanged();
        partial void OnIsSharedbymeChanging(System.Nullable<long> value);
        partial void OnIsSharedbymeChanged();
        partial void OnPublicUrlChanging(string value);
        partial void OnPublicUrlChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        partial void OnModificationDateNewChanging(string value);
        partial void OnModificationDateNewChanged();
        #endregion

        public Doc()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DocId in the schema.
        /// </summary>
        [Column(Name = @"doc_id", Storage = "_DocId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string DocId
        {
            get
            {
                return this._DocId;
            }
            set
            {
                if (this._DocId != value)
                {
                    this.OnDocIdChanging(value);
                    this.SendPropertyChanging();
                    this._DocId = value;
                    this.SendPropertyChanged("DocId");
                    this.OnDocIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InlineId in the schema.
        /// </summary>
        [Column(Name = @"inline_id", Storage = "_InlineId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string InlineId
        {
            get
            {
                return this._InlineId;
            }
            set
            {
                if (this._InlineId != value)
                {
                    this.OnInlineIdChanging(value);
                    this.SendPropertyChanging();
                    this._InlineId = value;
                    this.SendPropertyChanged("InlineId");
                    this.OnInlineIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FileName in the schema.
        /// </summary>
        [Column(Name = @"file_name", Storage = "_FileName", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string FileName
        {
            get
            {
                return this._FileName;
            }
            set
            {
                if (this._FileName != value)
                {
                    this.OnFileNameChanging(value);
                    this.SendPropertyChanging();
                    this._FileName = value;
                    this.SendPropertyChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MimeType in the schema.
        /// </summary>
        [Column(Name = @"mime_type", Storage = "_MimeType", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string MimeType
        {
            get
            {
                return this._MimeType;
            }
            set
            {
                if (this._MimeType != value)
                {
                    this.OnMimeTypeChanging(value);
                    this.SendPropertyChanging();
                    this._MimeType = value;
                    this.SendPropertyChanged("MimeType");
                    this.OnMimeTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FileUrl in the schema.
        /// </summary>
        [Column(Name = @"file_url", Storage = "_FileUrl", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string FileUrl
        {
            get
            {
                return this._FileUrl;
            }
            set
            {
                if (this._FileUrl != value)
                {
                    this.OnFileUrlChanging(value);
                    this.SendPropertyChanging();
                    this._FileUrl = value;
                    this.SendPropertyChanged("FileUrl");
                    this.OnFileUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ThumbnailUrl in the schema.
        /// </summary>
        [Column(Name = @"thumbnail_url", Storage = "_ThumbnailUrl", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ThumbnailUrl
        {
            get
            {
                return this._ThumbnailUrl;
            }
            set
            {
                if (this._ThumbnailUrl != value)
                {
                    this.OnThumbnailUrlChanging(value);
                    this.SendPropertyChanging();
                    this._ThumbnailUrl = value;
                    this.SendPropertyChanged("ThumbnailUrl");
                    this.OnThumbnailUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", DbType = "REAL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Size in the schema.
        /// </summary>
        [Column(Name = @"size", Storage = "_Size", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Size
        {
            get
            {
                return this._Size;
            }
            set
            {
                if (this._Size != value)
                {
                    this.OnSizeChanging(value);
                    this.SendPropertyChanging();
                    this._Size = value;
                    this.SendPropertyChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Creator in the schema.
        /// </summary>
        [Column(Name = @"creator", Storage = "_Creator", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Creator
        {
            get
            {
                return this._Creator;
            }
            set
            {
                if (this._Creator != value)
                {
                    this.OnCreatorChanging(value);
                    this.SendPropertyChanging();
                    this._Creator = value;
                    this.SendPropertyChanged("Creator");
                    this.OnCreatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreationDate in the schema.
        /// </summary>
        [Column(Name = @"creation_date", Storage = "_CreationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string CreationDate
        {
            get
            {
                return this._CreationDate;
            }
            set
            {
                if (this._CreationDate != value)
                {
                    this.OnCreationDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreationDate = value;
                    this.SendPropertyChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modifier in the schema.
        /// </summary>
        [Column(Name = @"modifier", Storage = "_Modifier", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Modifier
        {
            get
            {
                return this._Modifier;
            }
            set
            {
                if (this._Modifier != value)
                {
                    this.OnModifierChanging(value);
                    this.SendPropertyChanging();
                    this._Modifier = value;
                    this.SendPropertyChanged("Modifier");
                    this.OnModifierChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Name = @"company", Storage = "_Company", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModificationDate in the schema.
        /// </summary>
        [Column(Name = @"modification_date", Storage = "_ModificationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ModificationDate
        {
            get
            {
                return this._ModificationDate;
            }
            set
            {
                if (this._ModificationDate != value)
                {
                    this.OnModificationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModificationDate = value;
                    this.SendPropertyChanged("ModificationDate");
                    this.OnModificationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tags in the schema.
        /// </summary>
        [Column(Name = @"tags", Storage = "_Tags", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Tags
        {
            get
            {
                return this._Tags;
            }
            set
            {
                if (this._Tags != value)
                {
                    this.OnTagsChanging(value);
                    this.SendPropertyChanging();
                    this._Tags = value;
                    this.SendPropertyChanged("Tags");
                    this.OnTagsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [Column(Name = @"notes", Storage = "_Notes", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging();
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitIds in the schema.
        /// </summary>
        [Column(Name = @"wit_ids", Storage = "_WitIds", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string WitIds
        {
            get
            {
                return this._WitIds;
            }
            set
            {
                if (this._WitIds != value)
                {
                    this.OnWitIdsChanging(value);
                    this.SendPropertyChanging();
                    this._WitIds = value;
                    this.SendPropertyChanged("WitIds");
                    this.OnWitIdsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LocalPath in the schema.
        /// </summary>
        [Column(Name = @"local_path", Storage = "_LocalPath", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string LocalPath
        {
            get
            {
                return this._LocalPath;
            }
            set
            {
                if (this._LocalPath != value)
                {
                    this.OnLocalPathChanging(value);
                    this.SendPropertyChanging();
                    this._LocalPath = value;
                    this.SendPropertyChanged("LocalPath");
                    this.OnLocalPathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContainerDirPath in the schema.
        /// </summary>
        [Column(Name = @"container_dir_path", Storage = "_ContainerDirPath", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ContainerDirPath
        {
            get
            {
                return this._ContainerDirPath;
            }
            set
            {
                if (this._ContainerDirPath != value)
                {
                    this.OnContainerDirPathChanging(value);
                    this.SendPropertyChanging();
                    this._ContainerDirPath = value;
                    this.SendPropertyChanged("ContainerDirPath");
                    this.OnContainerDirPathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Permission in the schema.
        /// </summary>
        [Column(Name = @"permission", Storage = "_Permission", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Permission
        {
            get
            {
                return this._Permission;
            }
            set
            {
                if (this._Permission != value)
                {
                    this.OnPermissionChanging(value);
                    this.SendPropertyChanging();
                    this._Permission = value;
                    this.SendPropertyChanged("Permission");
                    this.OnPermissionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CanFurtherPerm in the schema.
        /// </summary>
        [Column(Name = @"can_further_perm", Storage = "_CanFurtherPerm", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> CanFurtherPerm
        {
            get
            {
                return this._CanFurtherPerm;
            }
            set
            {
                if (this._CanFurtherPerm != value)
                {
                    this.OnCanFurtherPermChanging(value);
                    this.SendPropertyChanging();
                    this._CanFurtherPerm = value;
                    this.SendPropertyChanged("CanFurtherPerm");
                    this.OnCanFurtherPermChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderId in the schema.
        /// </summary>
        [Column(Name = @"folder_id", Storage = "_FolderId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FolderId
        {
            get
            {
                return this._FolderId;
            }
            set
            {
                if (this._FolderId != value)
                {
                    this.OnFolderIdChanging(value);
                    this.SendPropertyChanging();
                    this._FolderId = value;
                    this.SendPropertyChanged("FolderId");
                    this.OnFolderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderType in the schema.
        /// </summary>
        [Column(Name = @"folder_type", Storage = "_FolderType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> FolderType
        {
            get
            {
                return this._FolderType;
            }
            set
            {
                if (this._FolderType != value)
                {
                    this.OnFolderTypeChanging(value);
                    this.SendPropertyChanging();
                    this._FolderType = value;
                    this.SendPropertyChanged("FolderType");
                    this.OnFolderTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WidgetType in the schema.
        /// </summary>
        [Column(Name = @"widget_type", Storage = "_WidgetType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> WidgetType
        {
            get
            {
                return this._WidgetType;
            }
            set
            {
                if (this._WidgetType != value)
                {
                    this.OnWidgetTypeChanging(value);
                    this.SendPropertyChanging();
                    this._WidgetType = value;
                    this.SendPropertyChanged("WidgetType");
                    this.OnWidgetTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsInline in the schema.
        /// </summary>
        [Column(Name = @"is_inline", Storage = "_IsInline", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsInline
        {
            get
            {
                return this._IsInline;
            }
            set
            {
                if (this._IsInline != value)
                {
                    this.OnIsInlineChanging(value);
                    this.SendPropertyChanging();
                    this._IsInline = value;
                    this.SendPropertyChanged("IsInline");
                    this.OnIsInlineChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Label in the schema.
        /// </summary>
        [Column(Name = @"label", Storage = "_Label", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Label
        {
            get
            {
                return this._Label;
            }
            set
            {
                if (this._Label != value)
                {
                    this.OnLabelChanging(value);
                    this.SendPropertyChanging();
                    this._Label = value;
                    this.SendPropertyChanged("Label");
                    this.OnLabelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsFav in the schema.
        /// </summary>
        [Column(Name = @"is_fav", Storage = "_IsFav", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsFav
        {
            get
            {
                return this._IsFav;
            }
            set
            {
                if (this._IsFav != value)
                {
                    this.OnIsFavChanging(value);
                    this.SendPropertyChanging();
                    this._IsFav = value;
                    this.SendPropertyChanged("IsFav");
                    this.OnIsFavChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ratingtotal in the schema.
        /// </summary>
        [Column(Name = @"ratingtotal", Storage = "_Ratingtotal", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Ratingtotal
        {
            get
            {
                return this._Ratingtotal;
            }
            set
            {
                if (this._Ratingtotal != value)
                {
                    this.OnRatingtotalChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingtotal = value;
                    this.SendPropertyChanged("Ratingtotal");
                    this.OnRatingtotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ratingcount in the schema.
        /// </summary>
        [Column(Name = @"ratingcount", Storage = "_Ratingcount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Ratingcount
        {
            get
            {
                return this._Ratingcount;
            }
            set
            {
                if (this._Ratingcount != value)
                {
                    this.OnRatingcountChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingcount = value;
                    this.SendPropertyChanged("Ratingcount");
                    this.OnRatingcountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsSharedbyme in the schema.
        /// </summary>
        [Column(Name = @"is_sharedbyme", Storage = "_IsSharedbyme", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsSharedbyme
        {
            get
            {
                return this._IsSharedbyme;
            }
            set
            {
                if (this._IsSharedbyme != value)
                {
                    this.OnIsSharedbymeChanging(value);
                    this.SendPropertyChanging();
                    this._IsSharedbyme = value;
                    this.SendPropertyChanged("IsSharedbyme");
                    this.OnIsSharedbymeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PublicUrl in the schema.
        /// </summary>
        [Column(Name = @"public_url", Storage = "_PublicUrl", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string PublicUrl
        {
            get
            {
                return this._PublicUrl;
            }
            set
            {
                if (this._PublicUrl != value)
                {
                    this.OnPublicUrlChanging(value);
                    this.SendPropertyChanging();
                    this._PublicUrl = value;
                    this.SendPropertyChanged("PublicUrl");
                    this.OnPublicUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModificationDateNew in the schema.
        /// </summary>
        [Column(Name = @"modification_date_new", Storage = "_ModificationDateNew", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ModificationDateNew
        {
            get
            {
                return this._ModificationDateNew;
            }
            set
            {
                if (this._ModificationDateNew != value)
                {
                    this.OnModificationDateNewChanging(value);
                    this.SendPropertyChanging();
                    this._ModificationDateNew = value;
                    this.SendPropertyChanged("ModificationDateNew");
                    this.OnModificationDateNewChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.EventRecord in the schema.
    /// </summary>
    [Table(Name = @"""main"".event_records")]
    public partial class EventRecord : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private byte[] _AnalyticsJson;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnAnalyticsJsonChanging(byte[] value);
        partial void OnAnalyticsJsonChanged();
        #endregion

        public EventRecord()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for AnalyticsJson in the schema.
        /// </summary>
        [Column(Name = @"analytics_json", Storage = "_AnalyticsJson", DbType = "BLOB", UpdateCheck = UpdateCheck.Never)]
        public byte[] AnalyticsJson
        {
            get
            {
                return this._AnalyticsJson;
            }
            set
            {
                if (this._AnalyticsJson != value)
                {
                    this.OnAnalyticsJsonChanging(value);
                    this.SendPropertyChanging();
                    this._AnalyticsJson = value;
                    this.SendPropertyChanged("AnalyticsJson");
                    this.OnAnalyticsJsonChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Folder in the schema.
    /// </summary>
    [Table(Name = @"""main"".folders")]
    public partial class Folder : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _FolderId;

        private string _FolderName;

        private string _FolderParentId;

        private System.Nullable<long> _FolderType = 0;

        private System.Nullable<long> _WidgetType = 0;

        private System.Nullable<long> _ItemCount = 0;

        private System.Nullable<long> _FolderLevel = 0;

        private System.Nullable<long> _IsSystemFolder = 0;

        private string _CreationDate;

        private string _ModificationDate;

        private string _Creator;

        private string _Modifier;

        private string _Company;

        private System.Nullable<long> _Permission = 0;

        private System.Nullable<long> _CanFurtherPerm = 0;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _Ratingtotal = 0;

        private System.Nullable<long> _Ratingcount = 0;

        private System.Nullable<long> _IsSharedbyme = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;

        private System.Nullable<long> _FolderNameIdentifier = 0;

        private string _LocalSyncPath;

        private string _WorkspaceId;

        private string _EnterpriseId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFolderIdChanging(string value);
        partial void OnFolderIdChanged();
        partial void OnFolderNameChanging(string value);
        partial void OnFolderNameChanged();
        partial void OnFolderParentIdChanging(string value);
        partial void OnFolderParentIdChanged();
        partial void OnFolderTypeChanging(System.Nullable<long> value);
        partial void OnFolderTypeChanged();
        partial void OnWidgetTypeChanging(System.Nullable<long> value);
        partial void OnWidgetTypeChanged();
        partial void OnItemCountChanging(System.Nullable<long> value);
        partial void OnItemCountChanged();
        partial void OnFolderLevelChanging(System.Nullable<long> value);
        partial void OnFolderLevelChanged();
        partial void OnIsSystemFolderChanging(System.Nullable<long> value);
        partial void OnIsSystemFolderChanged();
        partial void OnCreationDateChanging(string value);
        partial void OnCreationDateChanged();
        partial void OnModificationDateChanging(string value);
        partial void OnModificationDateChanged();
        partial void OnCreatorChanging(string value);
        partial void OnCreatorChanged();
        partial void OnModifierChanging(string value);
        partial void OnModifierChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnPermissionChanging(System.Nullable<long> value);
        partial void OnPermissionChanged();
        partial void OnCanFurtherPermChanging(System.Nullable<long> value);
        partial void OnCanFurtherPermChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnRatingtotalChanging(System.Nullable<long> value);
        partial void OnRatingtotalChanged();
        partial void OnRatingcountChanging(System.Nullable<long> value);
        partial void OnRatingcountChanged();
        partial void OnIsSharedbymeChanging(System.Nullable<long> value);
        partial void OnIsSharedbymeChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        partial void OnFolderNameIdentifierChanging(System.Nullable<long> value);
        partial void OnFolderNameIdentifierChanged();
        partial void OnLocalSyncPathChanging(string value);
        partial void OnLocalSyncPathChanged();
        partial void OnWorkspaceIdChanging(string value);
        partial void OnWorkspaceIdChanged();
        partial void OnEnterpriseIdChanging(string value);
        partial void OnEnterpriseIdChanged();
        #endregion

        public Folder()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for FolderId in the schema.
        /// </summary>
        [Column(Name = @"folder_id", Storage = "_FolderId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string FolderId
        {
            get
            {
                return this._FolderId;
            }
            set
            {
                if (this._FolderId != value)
                {
                    this.OnFolderIdChanging(value);
                    this.SendPropertyChanging();
                    this._FolderId = value;
                    this.SendPropertyChanged("FolderId");
                    this.OnFolderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderName in the schema.
        /// </summary>
        [Column(Name = @"folder_name", Storage = "_FolderName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FolderName
        {
            get
            {
                return this._FolderName;
            }
            set
            {
                if (this._FolderName != value)
                {
                    this.OnFolderNameChanging(value);
                    this.SendPropertyChanging();
                    this._FolderName = value;
                    this.SendPropertyChanged("FolderName");
                    this.OnFolderNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderParentId in the schema.
        /// </summary>
        [Column(Name = @"folder_parent_id", Storage = "_FolderParentId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FolderParentId
        {
            get
            {
                return this._FolderParentId;
            }
            set
            {
                if (this._FolderParentId != value)
                {
                    this.OnFolderParentIdChanging(value);
                    this.SendPropertyChanging();
                    this._FolderParentId = value;
                    this.SendPropertyChanged("FolderParentId");
                    this.OnFolderParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderType in the schema.
        /// </summary>
        [Column(Name = @"folder_type", Storage = "_FolderType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> FolderType
        {
            get
            {
                return this._FolderType;
            }
            set
            {
                if (this._FolderType != value)
                {
                    this.OnFolderTypeChanging(value);
                    this.SendPropertyChanging();
                    this._FolderType = value;
                    this.SendPropertyChanged("FolderType");
                    this.OnFolderTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WidgetType in the schema.
        /// </summary>
        [Column(Name = @"widget_type", Storage = "_WidgetType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> WidgetType
        {
            get
            {
                return this._WidgetType;
            }
            set
            {
                if (this._WidgetType != value)
                {
                    this.OnWidgetTypeChanging(value);
                    this.SendPropertyChanging();
                    this._WidgetType = value;
                    this.SendPropertyChanged("WidgetType");
                    this.OnWidgetTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemCount in the schema.
        /// </summary>
        [Column(Name = @"item_count", Storage = "_ItemCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ItemCount
        {
            get
            {
                return this._ItemCount;
            }
            set
            {
                if (this._ItemCount != value)
                {
                    this.OnItemCountChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCount = value;
                    this.SendPropertyChanged("ItemCount");
                    this.OnItemCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderLevel in the schema.
        /// </summary>
        [Column(Name = @"folder_level", Storage = "_FolderLevel", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> FolderLevel
        {
            get
            {
                return this._FolderLevel;
            }
            set
            {
                if (this._FolderLevel != value)
                {
                    this.OnFolderLevelChanging(value);
                    this.SendPropertyChanging();
                    this._FolderLevel = value;
                    this.SendPropertyChanged("FolderLevel");
                    this.OnFolderLevelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsSystemFolder in the schema.
        /// </summary>
        [Column(Name = @"is_system_folder", Storage = "_IsSystemFolder", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsSystemFolder
        {
            get
            {
                return this._IsSystemFolder;
            }
            set
            {
                if (this._IsSystemFolder != value)
                {
                    this.OnIsSystemFolderChanging(value);
                    this.SendPropertyChanging();
                    this._IsSystemFolder = value;
                    this.SendPropertyChanged("IsSystemFolder");
                    this.OnIsSystemFolderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreationDate in the schema.
        /// </summary>
        [Column(Name = @"creation_date", Storage = "_CreationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string CreationDate
        {
            get
            {
                return this._CreationDate;
            }
            set
            {
                if (this._CreationDate != value)
                {
                    this.OnCreationDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreationDate = value;
                    this.SendPropertyChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModificationDate in the schema.
        /// </summary>
        [Column(Name = @"modification_date", Storage = "_ModificationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ModificationDate
        {
            get
            {
                return this._ModificationDate;
            }
            set
            {
                if (this._ModificationDate != value)
                {
                    this.OnModificationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModificationDate = value;
                    this.SendPropertyChanged("ModificationDate");
                    this.OnModificationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Creator in the schema.
        /// </summary>
        [Column(Name = @"creator", Storage = "_Creator", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Creator
        {
            get
            {
                return this._Creator;
            }
            set
            {
                if (this._Creator != value)
                {
                    this.OnCreatorChanging(value);
                    this.SendPropertyChanging();
                    this._Creator = value;
                    this.SendPropertyChanged("Creator");
                    this.OnCreatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modifier in the schema.
        /// </summary>
        [Column(Name = @"modifier", Storage = "_Modifier", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Modifier
        {
            get
            {
                return this._Modifier;
            }
            set
            {
                if (this._Modifier != value)
                {
                    this.OnModifierChanging(value);
                    this.SendPropertyChanging();
                    this._Modifier = value;
                    this.SendPropertyChanged("Modifier");
                    this.OnModifierChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Name = @"company", Storage = "_Company", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Permission in the schema.
        /// </summary>
        [Column(Name = @"permission", Storage = "_Permission", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Permission
        {
            get
            {
                return this._Permission;
            }
            set
            {
                if (this._Permission != value)
                {
                    this.OnPermissionChanging(value);
                    this.SendPropertyChanging();
                    this._Permission = value;
                    this.SendPropertyChanged("Permission");
                    this.OnPermissionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CanFurtherPerm in the schema.
        /// </summary>
        [Column(Name = @"can_further_perm", Storage = "_CanFurtherPerm", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> CanFurtherPerm
        {
            get
            {
                return this._CanFurtherPerm;
            }
            set
            {
                if (this._CanFurtherPerm != value)
                {
                    this.OnCanFurtherPermChanging(value);
                    this.SendPropertyChanging();
                    this._CanFurtherPerm = value;
                    this.SendPropertyChanged("CanFurtherPerm");
                    this.OnCanFurtherPermChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ratingtotal in the schema.
        /// </summary>
        [Column(Name = @"ratingtotal", Storage = "_Ratingtotal", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Ratingtotal
        {
            get
            {
                return this._Ratingtotal;
            }
            set
            {
                if (this._Ratingtotal != value)
                {
                    this.OnRatingtotalChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingtotal = value;
                    this.SendPropertyChanged("Ratingtotal");
                    this.OnRatingtotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ratingcount in the schema.
        /// </summary>
        [Column(Name = @"ratingcount", Storage = "_Ratingcount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Ratingcount
        {
            get
            {
                return this._Ratingcount;
            }
            set
            {
                if (this._Ratingcount != value)
                {
                    this.OnRatingcountChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingcount = value;
                    this.SendPropertyChanged("Ratingcount");
                    this.OnRatingcountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsSharedbyme in the schema.
        /// </summary>
        [Column(Name = @"is_sharedbyme", Storage = "_IsSharedbyme", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsSharedbyme
        {
            get
            {
                return this._IsSharedbyme;
            }
            set
            {
                if (this._IsSharedbyme != value)
                {
                    this.OnIsSharedbymeChanging(value);
                    this.SendPropertyChanging();
                    this._IsSharedbyme = value;
                    this.SendPropertyChanged("IsSharedbyme");
                    this.OnIsSharedbymeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderNameIdentifier in the schema.
        /// </summary>
        [Column(Name = @"folder_name_identifier", Storage = "_FolderNameIdentifier", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> FolderNameIdentifier
        {
            get
            {
                return this._FolderNameIdentifier;
            }
            set
            {
                if (this._FolderNameIdentifier != value)
                {
                    this.OnFolderNameIdentifierChanging(value);
                    this.SendPropertyChanging();
                    this._FolderNameIdentifier = value;
                    this.SendPropertyChanged("FolderNameIdentifier");
                    this.OnFolderNameIdentifierChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LocalSyncPath in the schema.
        /// </summary>
        [Column(Name = @"local_sync_path", Storage = "_LocalSyncPath", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string LocalSyncPath
        {
            get
            {
                return this._LocalSyncPath;
            }
            set
            {
                if (this._LocalSyncPath != value)
                {
                    this.OnLocalSyncPathChanging(value);
                    this.SendPropertyChanging();
                    this._LocalSyncPath = value;
                    this.SendPropertyChanged("LocalSyncPath");
                    this.OnLocalSyncPathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkspaceId in the schema.
        /// </summary>
        [Column(Name = @"workspace_id", Storage = "_WorkspaceId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string WorkspaceId
        {
            get
            {
                return this._WorkspaceId;
            }
            set
            {
                if (this._WorkspaceId != value)
                {
                    this.OnWorkspaceIdChanging(value);
                    this.SendPropertyChanging();
                    this._WorkspaceId = value;
                    this.SendPropertyChanged("WorkspaceId");
                    this.OnWorkspaceIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnterpriseId in the schema.
        /// </summary>
        [Column(Name = @"enterprise_id", Storage = "_EnterpriseId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string EnterpriseId
        {
            get
            {
                return this._EnterpriseId;
            }
            set
            {
                if (this._EnterpriseId != value)
                {
                    this.OnEnterpriseIdChanging(value);
                    this.SendPropertyChanging();
                    this._EnterpriseId = value;
                    this.SendPropertyChanged("EnterpriseId");
                    this.OnEnterpriseIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.GroupContact in the schema.
    /// </summary>
    [Table(Name = @"""main"".group_contacts")]
    public partial class GroupContact : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private object _Id;

        private string _GroupId;

        private string _Username;

        private string _FromGroupId;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(object value);
        partial void OnIdChanged();
        partial void OnGroupIdChanging(string value);
        partial void OnGroupIdChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnFromGroupIdChanging(string value);
        partial void OnFromGroupIdChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        #endregion

        public GroupContact()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", DbType = "INTEGER ASC", UpdateCheck = UpdateCheck.Never)]
        public object Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupId in the schema.
        /// </summary>
        [Column(Name = @"group_id", Storage = "_GroupId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string GroupId
        {
            get
            {
                return this._GroupId;
            }
            set
            {
                if (this._GroupId != value)
                {
                    this.OnGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._GroupId = value;
                    this.SendPropertyChanged("GroupId");
                    this.OnGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Username in the schema.
        /// </summary>
        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FromGroupId in the schema.
        /// </summary>
        [Column(Name = @"from_group_id", Storage = "_FromGroupId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FromGroupId
        {
            get
            {
                return this._FromGroupId;
            }
            set
            {
                if (this._FromGroupId != value)
                {
                    this.OnFromGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._FromGroupId = value;
                    this.SendPropertyChanged("FromGroupId");
                    this.OnFromGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Group in the schema.
    /// </summary>
    [Table(Name = @"""main"".groups")]
    public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _GroupId;

        private string _GroupName;

        private System.Nullable<long> _Workspace = 0;

        private System.Nullable<long> _ItemCount = 0;

        private string _CreationDate;

        private string _ModificationDate;

        private string _Creator;

        private string _Modifier;

        private string _Company;

        private string _EnterpriseId;

        private string _CreatorId;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;

        private string _ValidUsers;

        private string _InvalidUsers;

        private System.Nullable<long> _IsSystem = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnGroupIdChanging(string value);
        partial void OnGroupIdChanged();
        partial void OnGroupNameChanging(string value);
        partial void OnGroupNameChanged();
        partial void OnWorkspaceChanging(System.Nullable<long> value);
        partial void OnWorkspaceChanged();
        partial void OnItemCountChanging(System.Nullable<long> value);
        partial void OnItemCountChanged();
        partial void OnCreationDateChanging(string value);
        partial void OnCreationDateChanged();
        partial void OnModificationDateChanging(string value);
        partial void OnModificationDateChanged();
        partial void OnCreatorChanging(string value);
        partial void OnCreatorChanged();
        partial void OnModifierChanging(string value);
        partial void OnModifierChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnEnterpriseIdChanging(string value);
        partial void OnEnterpriseIdChanged();
        partial void OnCreatorIdChanging(string value);
        partial void OnCreatorIdChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        partial void OnValidUsersChanging(string value);
        partial void OnValidUsersChanged();
        partial void OnInvalidUsersChanging(string value);
        partial void OnInvalidUsersChanged();
        partial void OnIsSystemChanging(System.Nullable<long> value);
        partial void OnIsSystemChanged();
        #endregion

        public Group()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for GroupId in the schema.
        /// </summary>
        [Column(Name = @"group_id", Storage = "_GroupId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string GroupId
        {
            get
            {
                return this._GroupId;
            }
            set
            {
                if (this._GroupId != value)
                {
                    this.OnGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._GroupId = value;
                    this.SendPropertyChanged("GroupId");
                    this.OnGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupName in the schema.
        /// </summary>
        [Column(Name = @"group_name", Storage = "_GroupName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string GroupName
        {
            get
            {
                return this._GroupName;
            }
            set
            {
                if (this._GroupName != value)
                {
                    this.OnGroupNameChanging(value);
                    this.SendPropertyChanging();
                    this._GroupName = value;
                    this.SendPropertyChanged("GroupName");
                    this.OnGroupNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Workspace in the schema.
        /// </summary>
        [Column(Name = @"workspace", Storage = "_Workspace", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Workspace
        {
            get
            {
                return this._Workspace;
            }
            set
            {
                if (this._Workspace != value)
                {
                    this.OnWorkspaceChanging(value);
                    this.SendPropertyChanging();
                    this._Workspace = value;
                    this.SendPropertyChanged("Workspace");
                    this.OnWorkspaceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemCount in the schema.
        /// </summary>
        [Column(Name = @"item_count", Storage = "_ItemCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ItemCount
        {
            get
            {
                return this._ItemCount;
            }
            set
            {
                if (this._ItemCount != value)
                {
                    this.OnItemCountChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCount = value;
                    this.SendPropertyChanged("ItemCount");
                    this.OnItemCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreationDate in the schema.
        /// </summary>
        [Column(Name = @"creation_date", Storage = "_CreationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string CreationDate
        {
            get
            {
                return this._CreationDate;
            }
            set
            {
                if (this._CreationDate != value)
                {
                    this.OnCreationDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreationDate = value;
                    this.SendPropertyChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModificationDate in the schema.
        /// </summary>
        [Column(Name = @"modification_date", Storage = "_ModificationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ModificationDate
        {
            get
            {
                return this._ModificationDate;
            }
            set
            {
                if (this._ModificationDate != value)
                {
                    this.OnModificationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModificationDate = value;
                    this.SendPropertyChanged("ModificationDate");
                    this.OnModificationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Creator in the schema.
        /// </summary>
        [Column(Name = @"creator", Storage = "_Creator", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Creator
        {
            get
            {
                return this._Creator;
            }
            set
            {
                if (this._Creator != value)
                {
                    this.OnCreatorChanging(value);
                    this.SendPropertyChanging();
                    this._Creator = value;
                    this.SendPropertyChanged("Creator");
                    this.OnCreatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modifier in the schema.
        /// </summary>
        [Column(Name = @"modifier", Storage = "_Modifier", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Modifier
        {
            get
            {
                return this._Modifier;
            }
            set
            {
                if (this._Modifier != value)
                {
                    this.OnModifierChanging(value);
                    this.SendPropertyChanging();
                    this._Modifier = value;
                    this.SendPropertyChanged("Modifier");
                    this.OnModifierChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Name = @"company", Storage = "_Company", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnterpriseId in the schema.
        /// </summary>
        [Column(Name = @"enterprise_id", Storage = "_EnterpriseId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string EnterpriseId
        {
            get
            {
                return this._EnterpriseId;
            }
            set
            {
                if (this._EnterpriseId != value)
                {
                    this.OnEnterpriseIdChanging(value);
                    this.SendPropertyChanging();
                    this._EnterpriseId = value;
                    this.SendPropertyChanged("EnterpriseId");
                    this.OnEnterpriseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreatorId in the schema.
        /// </summary>
        [Column(Name = @"creator_id", Storage = "_CreatorId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string CreatorId
        {
            get
            {
                return this._CreatorId;
            }
            set
            {
                if (this._CreatorId != value)
                {
                    this.OnCreatorIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreatorId = value;
                    this.SendPropertyChanged("CreatorId");
                    this.OnCreatorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidUsers in the schema.
        /// </summary>
        [Column(Name = @"valid_users", Storage = "_ValidUsers", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ValidUsers
        {
            get
            {
                return this._ValidUsers;
            }
            set
            {
                if (this._ValidUsers != value)
                {
                    this.OnValidUsersChanging(value);
                    this.SendPropertyChanging();
                    this._ValidUsers = value;
                    this.SendPropertyChanged("ValidUsers");
                    this.OnValidUsersChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvalidUsers in the schema.
        /// </summary>
        [Column(Name = @"invalid_users", Storage = "_InvalidUsers", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string InvalidUsers
        {
            get
            {
                return this._InvalidUsers;
            }
            set
            {
                if (this._InvalidUsers != value)
                {
                    this.OnInvalidUsersChanging(value);
                    this.SendPropertyChanging();
                    this._InvalidUsers = value;
                    this.SendPropertyChanged("InvalidUsers");
                    this.OnInvalidUsersChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsSystem in the schema.
        /// </summary>
        [Column(Name = @"is_system", Storage = "_IsSystem", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsSystem
        {
            get
            {
                return this._IsSystem;
            }
            set
            {
                if (this._IsSystem != value)
                {
                    this.OnIsSystemChanging(value);
                    this.SendPropertyChanging();
                    this._IsSystem = value;
                    this.SendPropertyChanged("IsSystem");
                    this.OnIsSystemChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.NotificationAction in the schema.
    /// </summary>
    [Table(Name = @"""main"".notification_actions")]
    public partial class NotificationAction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _ActionId;

        private string _NotificationId;

        private string _Name;

        private string _Params;

        private string _Api;

        private System.Nullable<long> _ApiBase = 0;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnActionIdChanging(string value);
        partial void OnActionIdChanged();
        partial void OnNotificationIdChanging(string value);
        partial void OnNotificationIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParamsChanging(string value);
        partial void OnParamsChanged();
        partial void OnApiChanging(string value);
        partial void OnApiChanged();
        partial void OnApiBaseChanging(System.Nullable<long> value);
        partial void OnApiBaseChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        #endregion

        public NotificationAction()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for ActionId in the schema.
        /// </summary>
        [Column(Name = @"action_id", Storage = "_ActionId", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ActionId
        {
            get
            {
                return this._ActionId;
            }
            set
            {
                if (this._ActionId != value)
                {
                    this.OnActionIdChanging(value);
                    this.SendPropertyChanging();
                    this._ActionId = value;
                    this.SendPropertyChanged("ActionId");
                    this.OnActionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NotificationId in the schema.
        /// </summary>
        [Column(Name = @"notification_id", Storage = "_NotificationId", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NotificationId
        {
            get
            {
                return this._NotificationId;
            }
            set
            {
                if (this._NotificationId != value)
                {
                    this.OnNotificationIdChanging(value);
                    this.SendPropertyChanging();
                    this._NotificationId = value;
                    this.SendPropertyChanged("NotificationId");
                    this.OnNotificationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Params in the schema.
        /// </summary>
        [Column(Name = @"params", Storage = "_Params", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Params
        {
            get
            {
                return this._Params;
            }
            set
            {
                if (this._Params != value)
                {
                    this.OnParamsChanging(value);
                    this.SendPropertyChanging();
                    this._Params = value;
                    this.SendPropertyChanged("Params");
                    this.OnParamsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Api in the schema.
        /// </summary>
        [Column(Name = @"api", Storage = "_Api", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Api
        {
            get
            {
                return this._Api;
            }
            set
            {
                if (this._Api != value)
                {
                    this.OnApiChanging(value);
                    this.SendPropertyChanging();
                    this._Api = value;
                    this.SendPropertyChanged("Api");
                    this.OnApiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApiBase in the schema.
        /// </summary>
        [Column(Name = @"api_base", Storage = "_ApiBase", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ApiBase
        {
            get
            {
                return this._ApiBase;
            }
            set
            {
                if (this._ApiBase != value)
                {
                    this.OnApiBaseChanging(value);
                    this.SendPropertyChanging();
                    this._ApiBase = value;
                    this.SendPropertyChanged("ApiBase");
                    this.OnApiBaseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Notification in the schema.
    /// </summary>
    [Table(Name = @"""main"".notifications")]
    public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _NotificationId;

        private string _Message;

        private System.Nullable<long> _Type = 0;

        private string _Sender;

        private string _Receiver;

        private string _ObjId;

        private string _CreationDate;

        private string _SyncDate;

        private System.Nullable<long> _IsRead = 0;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNotificationIdChanging(string value);
        partial void OnNotificationIdChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnTypeChanging(System.Nullable<long> value);
        partial void OnTypeChanged();
        partial void OnSenderChanging(string value);
        partial void OnSenderChanged();
        partial void OnReceiverChanging(string value);
        partial void OnReceiverChanged();
        partial void OnObjIdChanging(string value);
        partial void OnObjIdChanged();
        partial void OnCreationDateChanging(string value);
        partial void OnCreationDateChanged();
        partial void OnSyncDateChanging(string value);
        partial void OnSyncDateChanged();
        partial void OnIsReadChanging(System.Nullable<long> value);
        partial void OnIsReadChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        #endregion

        public Notification()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for NotificationId in the schema.
        /// </summary>
        [Column(Name = @"notification_id", Storage = "_NotificationId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string NotificationId
        {
            get
            {
                return this._NotificationId;
            }
            set
            {
                if (this._NotificationId != value)
                {
                    this.OnNotificationIdChanging(value);
                    this.SendPropertyChanging();
                    this._NotificationId = value;
                    this.SendPropertyChanged("NotificationId");
                    this.OnNotificationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Message in the schema.
        /// </summary>
        [Column(Name = @"message", Storage = "_Message", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this.SendPropertyChanging();
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sender in the schema.
        /// </summary>
        [Column(Name = @"sender", Storage = "_Sender", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Sender
        {
            get
            {
                return this._Sender;
            }
            set
            {
                if (this._Sender != value)
                {
                    this.OnSenderChanging(value);
                    this.SendPropertyChanging();
                    this._Sender = value;
                    this.SendPropertyChanged("Sender");
                    this.OnSenderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Receiver in the schema.
        /// </summary>
        [Column(Name = @"receiver", Storage = "_Receiver", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Receiver
        {
            get
            {
                return this._Receiver;
            }
            set
            {
                if (this._Receiver != value)
                {
                    this.OnReceiverChanging(value);
                    this.SendPropertyChanging();
                    this._Receiver = value;
                    this.SendPropertyChanged("Receiver");
                    this.OnReceiverChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ObjId in the schema.
        /// </summary>
        [Column(Name = @"obj_id", Storage = "_ObjId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ObjId
        {
            get
            {
                return this._ObjId;
            }
            set
            {
                if (this._ObjId != value)
                {
                    this.OnObjIdChanging(value);
                    this.SendPropertyChanging();
                    this._ObjId = value;
                    this.SendPropertyChanged("ObjId");
                    this.OnObjIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreationDate in the schema.
        /// </summary>
        [Column(Name = @"creation_date", Storage = "_CreationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string CreationDate
        {
            get
            {
                return this._CreationDate;
            }
            set
            {
                if (this._CreationDate != value)
                {
                    this.OnCreationDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreationDate = value;
                    this.SendPropertyChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncDate in the schema.
        /// </summary>
        [Column(Name = @"sync_date", Storage = "_SyncDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string SyncDate
        {
            get
            {
                return this._SyncDate;
            }
            set
            {
                if (this._SyncDate != value)
                {
                    this.OnSyncDateChanging(value);
                    this.SendPropertyChanging();
                    this._SyncDate = value;
                    this.SendPropertyChanged("SyncDate");
                    this.OnSyncDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsRead in the schema.
        /// </summary>
        [Column(Name = @"is_read", Storage = "_IsRead", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsRead
        {
            get
            {
                return this._IsRead;
            }
            set
            {
                if (this._IsRead != value)
                {
                    this.OnIsReadChanging(value);
                    this.SendPropertyChanging();
                    this._IsRead = value;
                    this.SendPropertyChanged("IsRead");
                    this.OnIsReadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Package in the schema.
    /// </summary>
    [Table(Name = @"""main"".package")]
    public partial class Package : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _PackageId;

        private string _PackageName = @"None";

        private System.Nullable<long> _PackageType = 0;

        private System.Nullable<long> _BasePackage = 0;

        private string _PackageDesc = @"None";
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPackageIdChanging(string value);
        partial void OnPackageIdChanged();
        partial void OnPackageNameChanging(string value);
        partial void OnPackageNameChanged();
        partial void OnPackageTypeChanging(System.Nullable<long> value);
        partial void OnPackageTypeChanged();
        partial void OnBasePackageChanging(System.Nullable<long> value);
        partial void OnBasePackageChanged();
        partial void OnPackageDescChanging(string value);
        partial void OnPackageDescChanged();
        #endregion

        public Package()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PackageId in the schema.
        /// </summary>
        [Column(Name = @"package_id", Storage = "_PackageId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string PackageId
        {
            get
            {
                return this._PackageId;
            }
            set
            {
                if (this._PackageId != value)
                {
                    this.OnPackageIdChanging(value);
                    this.SendPropertyChanging();
                    this._PackageId = value;
                    this.SendPropertyChanged("PackageId");
                    this.OnPackageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackageName in the schema.
        /// </summary>
        [Column(Name = @"package_name", Storage = "_PackageName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string PackageName
        {
            get
            {
                return this._PackageName;
            }
            set
            {
                if (this._PackageName != value)
                {
                    this.OnPackageNameChanging(value);
                    this.SendPropertyChanging();
                    this._PackageName = value;
                    this.SendPropertyChanged("PackageName");
                    this.OnPackageNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackageType in the schema.
        /// </summary>
        [Column(Name = @"package_type", Storage = "_PackageType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> PackageType
        {
            get
            {
                return this._PackageType;
            }
            set
            {
                if (this._PackageType != value)
                {
                    this.OnPackageTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PackageType = value;
                    this.SendPropertyChanged("PackageType");
                    this.OnPackageTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BasePackage in the schema.
        /// </summary>
        [Column(Name = @"base_package", Storage = "_BasePackage", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> BasePackage
        {
            get
            {
                return this._BasePackage;
            }
            set
            {
                if (this._BasePackage != value)
                {
                    this.OnBasePackageChanging(value);
                    this.SendPropertyChanging();
                    this._BasePackage = value;
                    this.SendPropertyChanged("BasePackage");
                    this.OnBasePackageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackageDesc in the schema.
        /// </summary>
        [Column(Name = @"package_desc", Storage = "_PackageDesc", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string PackageDesc
        {
            get
            {
                return this._PackageDesc;
            }
            set
            {
                if (this._PackageDesc != value)
                {
                    this.OnPackageDescChanging(value);
                    this.SendPropertyChanging();
                    this._PackageDesc = value;
                    this.SendPropertyChanged("PackageDesc");
                    this.OnPackageDescChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.PackageFeature in the schema.
    /// </summary>
    [Table(Name = @"""main"".package_feature")]
    public partial class PackageFeature : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _PackagefId;

        private string _PackageId;

        private string _FeatureId;

        private string _FeatureName;

        private System.Nullable<long> _IsEnabled = 0;

        private System.Nullable<long> _IsHidden = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPackagefIdChanging(long value);
        partial void OnPackagefIdChanged();
        partial void OnPackageIdChanging(string value);
        partial void OnPackageIdChanged();
        partial void OnFeatureIdChanging(string value);
        partial void OnFeatureIdChanged();
        partial void OnFeatureNameChanging(string value);
        partial void OnFeatureNameChanged();
        partial void OnIsEnabledChanging(System.Nullable<long> value);
        partial void OnIsEnabledChanged();
        partial void OnIsHiddenChanging(System.Nullable<long> value);
        partial void OnIsHiddenChanged();
        #endregion

        public PackageFeature()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PackagefId in the schema.
        /// </summary>
        [Column(Name = @"packagef__id", Storage = "_PackagefId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long PackagefId
        {
            get
            {
                return this._PackagefId;
            }
        }

    
        /// <summary>
        /// There are no comments for PackageId in the schema.
        /// </summary>
        [Column(Name = @"package_id", Storage = "_PackageId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string PackageId
        {
            get
            {
                return this._PackageId;
            }
            set
            {
                if (this._PackageId != value)
                {
                    this.OnPackageIdChanging(value);
                    this.SendPropertyChanging();
                    this._PackageId = value;
                    this.SendPropertyChanged("PackageId");
                    this.OnPackageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FeatureId in the schema.
        /// </summary>
        [Column(Name = @"feature_id", Storage = "_FeatureId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FeatureId
        {
            get
            {
                return this._FeatureId;
            }
            set
            {
                if (this._FeatureId != value)
                {
                    this.OnFeatureIdChanging(value);
                    this.SendPropertyChanging();
                    this._FeatureId = value;
                    this.SendPropertyChanged("FeatureId");
                    this.OnFeatureIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FeatureName in the schema.
        /// </summary>
        [Column(Name = @"feature_name", Storage = "_FeatureName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FeatureName
        {
            get
            {
                return this._FeatureName;
            }
            set
            {
                if (this._FeatureName != value)
                {
                    this.OnFeatureNameChanging(value);
                    this.SendPropertyChanging();
                    this._FeatureName = value;
                    this.SendPropertyChanged("FeatureName");
                    this.OnFeatureNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsEnabled in the schema.
        /// </summary>
        [Column(Name = @"is_enabled", Storage = "_IsEnabled", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsEnabled
        {
            get
            {
                return this._IsEnabled;
            }
            set
            {
                if (this._IsEnabled != value)
                {
                    this.OnIsEnabledChanging(value);
                    this.SendPropertyChanging();
                    this._IsEnabled = value;
                    this.SendPropertyChanged("IsEnabled");
                    this.OnIsEnabledChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsHidden in the schema.
        /// </summary>
        [Column(Name = @"is_hidden", Storage = "_IsHidden", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsHidden
        {
            get
            {
                return this._IsHidden;
            }
            set
            {
                if (this._IsHidden != value)
                {
                    this.OnIsHiddenChanging(value);
                    this.SendPropertyChanging();
                    this._IsHidden = value;
                    this.SendPropertyChanged("IsHidden");
                    this.OnIsHiddenChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Socialmedia in the schema.
    /// </summary>
    [Table(Name = @"""main"".socialmedia")]
    public partial class Socialmedia : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _SocialMediaType;

        private System.Nullable<long> _IsUserOauthDone = 0;

        private string _UserOauthToken;

        private object _UserOauthTokenExpireIn;

        private string _UserOauthTokenSecretKey;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSocialMediaTypeChanging(string value);
        partial void OnSocialMediaTypeChanged();
        partial void OnIsUserOauthDoneChanging(System.Nullable<long> value);
        partial void OnIsUserOauthDoneChanged();
        partial void OnUserOauthTokenChanging(string value);
        partial void OnUserOauthTokenChanged();
        partial void OnUserOauthTokenExpireInChanging(object value);
        partial void OnUserOauthTokenExpireInChanged();
        partial void OnUserOauthTokenSecretKeyChanging(string value);
        partial void OnUserOauthTokenSecretKeyChanged();
        #endregion

        public Socialmedia()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SocialMediaType in the schema.
        /// </summary>
        [Column(Name = @"socialMediaType", Storage = "_SocialMediaType", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string SocialMediaType
        {
            get
            {
                return this._SocialMediaType;
            }
            set
            {
                if (this._SocialMediaType != value)
                {
                    this.OnSocialMediaTypeChanging(value);
                    this.SendPropertyChanging();
                    this._SocialMediaType = value;
                    this.SendPropertyChanged("SocialMediaType");
                    this.OnSocialMediaTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsUserOauthDone in the schema.
        /// </summary>
        [Column(Name = @"is_user_oauth_done", Storage = "_IsUserOauthDone", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsUserOauthDone
        {
            get
            {
                return this._IsUserOauthDone;
            }
            set
            {
                if (this._IsUserOauthDone != value)
                {
                    this.OnIsUserOauthDoneChanging(value);
                    this.SendPropertyChanging();
                    this._IsUserOauthDone = value;
                    this.SendPropertyChanged("IsUserOauthDone");
                    this.OnIsUserOauthDoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserOauthToken in the schema.
        /// </summary>
        [Column(Name = @"user_oauth_token", Storage = "_UserOauthToken", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string UserOauthToken
        {
            get
            {
                return this._UserOauthToken;
            }
            set
            {
                if (this._UserOauthToken != value)
                {
                    this.OnUserOauthTokenChanging(value);
                    this.SendPropertyChanging();
                    this._UserOauthToken = value;
                    this.SendPropertyChanged("UserOauthToken");
                    this.OnUserOauthTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserOauthTokenExpireIn in the schema.
        /// </summary>
        [Column(Name = @"user_oauth_token_expire_in", Storage = "_UserOauthTokenExpireIn", DbType = "NUMBER", UpdateCheck = UpdateCheck.Never)]
        public object UserOauthTokenExpireIn
        {
            get
            {
                return this._UserOauthTokenExpireIn;
            }
            set
            {
                if (this._UserOauthTokenExpireIn != value)
                {
                    this.OnUserOauthTokenExpireInChanging(value);
                    this.SendPropertyChanging();
                    this._UserOauthTokenExpireIn = value;
                    this.SendPropertyChanged("UserOauthTokenExpireIn");
                    this.OnUserOauthTokenExpireInChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserOauthTokenSecretKey in the schema.
        /// </summary>
        [Column(Name = @"user_oauth_token_secret_key", Storage = "_UserOauthTokenSecretKey", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string UserOauthTokenSecretKey
        {
            get
            {
                return this._UserOauthTokenSecretKey;
            }
            set
            {
                if (this._UserOauthTokenSecretKey != value)
                {
                    this.OnUserOauthTokenSecretKeyChanging(value);
                    this.SendPropertyChanging();
                    this._UserOauthTokenSecretKey = value;
                    this.SendPropertyChanged("UserOauthTokenSecretKey");
                    this.OnUserOauthTokenSecretKeyChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Taggroup in the schema.
    /// </summary>
    [Table(Name = @"""main"".taggroups")]
    public partial class Taggroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _TaggroupId;

        private string _Name;

        private string _ParentId;

        private string _ParentName;

        private string _EnterpriseId;

        private System.Nullable<long> _Source = 0;

        private System.Nullable<long> _Status = 0;

        private System.Nullable<long> _Workspace = 0;

        private string _CreationDate;

        private string _ModificationDate;

        private string _Creator;

        private string _Modifier;

        private string _Company;

        private System.Nullable<long> _Permission = 0;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;

        private System.Nullable<long> _Level = 0;

        private System.Nullable<long> _IsSystem = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTaggroupIdChanging(string value);
        partial void OnTaggroupIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentIdChanging(string value);
        partial void OnParentIdChanged();
        partial void OnParentNameChanging(string value);
        partial void OnParentNameChanged();
        partial void OnEnterpriseIdChanging(string value);
        partial void OnEnterpriseIdChanged();
        partial void OnSourceChanging(System.Nullable<long> value);
        partial void OnSourceChanged();
        partial void OnStatusChanging(System.Nullable<long> value);
        partial void OnStatusChanged();
        partial void OnWorkspaceChanging(System.Nullable<long> value);
        partial void OnWorkspaceChanged();
        partial void OnCreationDateChanging(string value);
        partial void OnCreationDateChanged();
        partial void OnModificationDateChanging(string value);
        partial void OnModificationDateChanged();
        partial void OnCreatorChanging(string value);
        partial void OnCreatorChanged();
        partial void OnModifierChanging(string value);
        partial void OnModifierChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnPermissionChanging(System.Nullable<long> value);
        partial void OnPermissionChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        partial void OnLevelChanging(System.Nullable<long> value);
        partial void OnLevelChanged();
        partial void OnIsSystemChanging(System.Nullable<long> value);
        partial void OnIsSystemChanged();
        #endregion

        public Taggroup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TaggroupId in the schema.
        /// </summary>
        [Column(Name = @"taggroup_id", Storage = "_TaggroupId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string TaggroupId
        {
            get
            {
                return this._TaggroupId;
            }
            set
            {
                if (this._TaggroupId != value)
                {
                    this.OnTaggroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaggroupId = value;
                    this.SendPropertyChanged("TaggroupId");
                    this.OnTaggroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentId in the schema.
        /// </summary>
        [Column(Name = @"parent_id", Storage = "_ParentId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ParentId
        {
            get
            {
                return this._ParentId;
            }
            set
            {
                if (this._ParentId != value)
                {
                    this.OnParentIdChanging(value);
                    this.SendPropertyChanging();
                    this._ParentId = value;
                    this.SendPropertyChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentName in the schema.
        /// </summary>
        [Column(Name = @"parent_name", Storage = "_ParentName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ParentName
        {
            get
            {
                return this._ParentName;
            }
            set
            {
                if (this._ParentName != value)
                {
                    this.OnParentNameChanging(value);
                    this.SendPropertyChanging();
                    this._ParentName = value;
                    this.SendPropertyChanged("ParentName");
                    this.OnParentNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnterpriseId in the schema.
        /// </summary>
        [Column(Name = @"enterprise_id", Storage = "_EnterpriseId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string EnterpriseId
        {
            get
            {
                return this._EnterpriseId;
            }
            set
            {
                if (this._EnterpriseId != value)
                {
                    this.OnEnterpriseIdChanging(value);
                    this.SendPropertyChanging();
                    this._EnterpriseId = value;
                    this.SendPropertyChanged("EnterpriseId");
                    this.OnEnterpriseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Source in the schema.
        /// </summary>
        [Column(Name = @"source", Storage = "_Source", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Source
        {
            get
            {
                return this._Source;
            }
            set
            {
                if (this._Source != value)
                {
                    this.OnSourceChanging(value);
                    this.SendPropertyChanging();
                    this._Source = value;
                    this.SendPropertyChanged("Source");
                    this.OnSourceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Workspace in the schema.
        /// </summary>
        [Column(Name = @"workspace", Storage = "_Workspace", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Workspace
        {
            get
            {
                return this._Workspace;
            }
            set
            {
                if (this._Workspace != value)
                {
                    this.OnWorkspaceChanging(value);
                    this.SendPropertyChanging();
                    this._Workspace = value;
                    this.SendPropertyChanged("Workspace");
                    this.OnWorkspaceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreationDate in the schema.
        /// </summary>
        [Column(Name = @"creation_date", Storage = "_CreationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string CreationDate
        {
            get
            {
                return this._CreationDate;
            }
            set
            {
                if (this._CreationDate != value)
                {
                    this.OnCreationDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreationDate = value;
                    this.SendPropertyChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModificationDate in the schema.
        /// </summary>
        [Column(Name = @"modification_date", Storage = "_ModificationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ModificationDate
        {
            get
            {
                return this._ModificationDate;
            }
            set
            {
                if (this._ModificationDate != value)
                {
                    this.OnModificationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModificationDate = value;
                    this.SendPropertyChanged("ModificationDate");
                    this.OnModificationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Creator in the schema.
        /// </summary>
        [Column(Name = @"creator", Storage = "_Creator", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Creator
        {
            get
            {
                return this._Creator;
            }
            set
            {
                if (this._Creator != value)
                {
                    this.OnCreatorChanging(value);
                    this.SendPropertyChanging();
                    this._Creator = value;
                    this.SendPropertyChanged("Creator");
                    this.OnCreatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modifier in the schema.
        /// </summary>
        [Column(Name = @"modifier", Storage = "_Modifier", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Modifier
        {
            get
            {
                return this._Modifier;
            }
            set
            {
                if (this._Modifier != value)
                {
                    this.OnModifierChanging(value);
                    this.SendPropertyChanging();
                    this._Modifier = value;
                    this.SendPropertyChanged("Modifier");
                    this.OnModifierChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Name = @"company", Storage = "_Company", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Permission in the schema.
        /// </summary>
        [Column(Name = @"permission", Storage = "_Permission", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Permission
        {
            get
            {
                return this._Permission;
            }
            set
            {
                if (this._Permission != value)
                {
                    this.OnPermissionChanging(value);
                    this.SendPropertyChanging();
                    this._Permission = value;
                    this.SendPropertyChanged("Permission");
                    this.OnPermissionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Level in the schema.
        /// </summary>
        [Column(Name = @"level", Storage = "_Level", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Level
        {
            get
            {
                return this._Level;
            }
            set
            {
                if (this._Level != value)
                {
                    this.OnLevelChanging(value);
                    this.SendPropertyChanging();
                    this._Level = value;
                    this.SendPropertyChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsSystem in the schema.
        /// </summary>
        [Column(Name = @"is_system", Storage = "_IsSystem", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsSystem
        {
            get
            {
                return this._IsSystem;
            }
            set
            {
                if (this._IsSystem != value)
                {
                    this.OnIsSystemChanging(value);
                    this.SendPropertyChanging();
                    this._IsSystem = value;
                    this.SendPropertyChanged("IsSystem");
                    this.OnIsSystemChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Tag in the schema.
    /// </summary>
    [Table(Name = @"""main"".tags")]
    public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Id;

        private string _Name;

        private string _ParentId;

        private string _ParentName;

        private string _EnterpriseId;

        private System.Nullable<long> _Source = 0;

        private System.Nullable<long> _Status = 0;

        private System.Nullable<long> _Workspace = 0;

        private string _CreationDate;

        private string _ModificationDate;

        private string _Creator;

        private string _Modifier;

        private string _Company;

        private System.Nullable<long> _Permission = 0;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentIdChanging(string value);
        partial void OnParentIdChanged();
        partial void OnParentNameChanging(string value);
        partial void OnParentNameChanged();
        partial void OnEnterpriseIdChanging(string value);
        partial void OnEnterpriseIdChanged();
        partial void OnSourceChanging(System.Nullable<long> value);
        partial void OnSourceChanged();
        partial void OnStatusChanging(System.Nullable<long> value);
        partial void OnStatusChanged();
        partial void OnWorkspaceChanging(System.Nullable<long> value);
        partial void OnWorkspaceChanged();
        partial void OnCreationDateChanging(string value);
        partial void OnCreationDateChanged();
        partial void OnModificationDateChanging(string value);
        partial void OnModificationDateChanged();
        partial void OnCreatorChanging(string value);
        partial void OnCreatorChanged();
        partial void OnModifierChanging(string value);
        partial void OnModifierChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnPermissionChanging(System.Nullable<long> value);
        partial void OnPermissionChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        #endregion

        public Tag()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentId in the schema.
        /// </summary>
        [Column(Name = @"parent_id", Storage = "_ParentId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ParentId
        {
            get
            {
                return this._ParentId;
            }
            set
            {
                if (this._ParentId != value)
                {
                    this.OnParentIdChanging(value);
                    this.SendPropertyChanging();
                    this._ParentId = value;
                    this.SendPropertyChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentName in the schema.
        /// </summary>
        [Column(Name = @"parent_name", Storage = "_ParentName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ParentName
        {
            get
            {
                return this._ParentName;
            }
            set
            {
                if (this._ParentName != value)
                {
                    this.OnParentNameChanging(value);
                    this.SendPropertyChanging();
                    this._ParentName = value;
                    this.SendPropertyChanged("ParentName");
                    this.OnParentNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnterpriseId in the schema.
        /// </summary>
        [Column(Name = @"enterprise_id", Storage = "_EnterpriseId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string EnterpriseId
        {
            get
            {
                return this._EnterpriseId;
            }
            set
            {
                if (this._EnterpriseId != value)
                {
                    this.OnEnterpriseIdChanging(value);
                    this.SendPropertyChanging();
                    this._EnterpriseId = value;
                    this.SendPropertyChanged("EnterpriseId");
                    this.OnEnterpriseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Source in the schema.
        /// </summary>
        [Column(Name = @"source", Storage = "_Source", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Source
        {
            get
            {
                return this._Source;
            }
            set
            {
                if (this._Source != value)
                {
                    this.OnSourceChanging(value);
                    this.SendPropertyChanging();
                    this._Source = value;
                    this.SendPropertyChanged("Source");
                    this.OnSourceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Workspace in the schema.
        /// </summary>
        [Column(Name = @"workspace", Storage = "_Workspace", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Workspace
        {
            get
            {
                return this._Workspace;
            }
            set
            {
                if (this._Workspace != value)
                {
                    this.OnWorkspaceChanging(value);
                    this.SendPropertyChanging();
                    this._Workspace = value;
                    this.SendPropertyChanged("Workspace");
                    this.OnWorkspaceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreationDate in the schema.
        /// </summary>
        [Column(Name = @"creation_date", Storage = "_CreationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string CreationDate
        {
            get
            {
                return this._CreationDate;
            }
            set
            {
                if (this._CreationDate != value)
                {
                    this.OnCreationDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreationDate = value;
                    this.SendPropertyChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModificationDate in the schema.
        /// </summary>
        [Column(Name = @"modification_date", Storage = "_ModificationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ModificationDate
        {
            get
            {
                return this._ModificationDate;
            }
            set
            {
                if (this._ModificationDate != value)
                {
                    this.OnModificationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModificationDate = value;
                    this.SendPropertyChanged("ModificationDate");
                    this.OnModificationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Creator in the schema.
        /// </summary>
        [Column(Name = @"creator", Storage = "_Creator", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Creator
        {
            get
            {
                return this._Creator;
            }
            set
            {
                if (this._Creator != value)
                {
                    this.OnCreatorChanging(value);
                    this.SendPropertyChanging();
                    this._Creator = value;
                    this.SendPropertyChanged("Creator");
                    this.OnCreatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modifier in the schema.
        /// </summary>
        [Column(Name = @"modifier", Storage = "_Modifier", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Modifier
        {
            get
            {
                return this._Modifier;
            }
            set
            {
                if (this._Modifier != value)
                {
                    this.OnModifierChanging(value);
                    this.SendPropertyChanging();
                    this._Modifier = value;
                    this.SendPropertyChanged("Modifier");
                    this.OnModifierChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Name = @"company", Storage = "_Company", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Permission in the schema.
        /// </summary>
        [Column(Name = @"permission", Storage = "_Permission", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Permission
        {
            get
            {
                return this._Permission;
            }
            set
            {
                if (this._Permission != value)
                {
                    this.OnPermissionChanging(value);
                    this.SendPropertyChanging();
                    this._Permission = value;
                    this.SendPropertyChanged("Permission");
                    this.OnPermissionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.TopWit in the schema.
    /// </summary>
    [Table(Name = @"""main"".top_wits")]
    public partial class TopWit : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _FromDate;

        private string _ToDate;

        private System.Nullable<long> _Count;

        private string _Usage;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnFromDateChanging(string value);
        partial void OnFromDateChanged();
        partial void OnToDateChanging(string value);
        partial void OnToDateChanged();
        partial void OnCountChanging(System.Nullable<long> value);
        partial void OnCountChanged();
        partial void OnUsageChanging(string value);
        partial void OnUsageChanged();
        #endregion

        public TopWit()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for FromDate in the schema.
        /// </summary>
        [Column(Name = @"from_date", Storage = "_FromDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if (this._FromDate != value)
                {
                    this.OnFromDateChanging(value);
                    this.SendPropertyChanging();
                    this._FromDate = value;
                    this.SendPropertyChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToDate in the schema.
        /// </summary>
        [Column(Name = @"to_date", Storage = "_ToDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if (this._ToDate != value)
                {
                    this.OnToDateChanging(value);
                    this.SendPropertyChanging();
                    this._ToDate = value;
                    this.SendPropertyChanged("ToDate");
                    this.OnToDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Count in the schema.
        /// </summary>
        [Column(Name = @"count", Storage = "_Count", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Count
        {
            get
            {
                return this._Count;
            }
            set
            {
                if (this._Count != value)
                {
                    this.OnCountChanging(value);
                    this.SendPropertyChanging();
                    this._Count = value;
                    this.SendPropertyChanged("Count");
                    this.OnCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Usage in the schema.
        /// </summary>
        [Column(Name = @"usage", Storage = "_Usage", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Usage
        {
            get
            {
                return this._Usage;
            }
            set
            {
                if (this._Usage != value)
                {
                    this.OnUsageChanging(value);
                    this.SendPropertyChanging();
                    this._Usage = value;
                    this.SendPropertyChanged("Usage");
                    this.OnUsageChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.UserDefault in the schema.
    /// </summary>
    [Table(Name = @"""main"".user_defaults")]
    public partial class UserDefault : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _FontFamily = @"Arial";

        private System.Nullable<long> _FontSize = 12;

        private string _FontColor = @"#000000";

        private System.Nullable<long> _IsUseondrag = 0;

        private byte[] _FontSettings;

        private byte[] _DesktopSettings;

        private byte[] _WidgetSettings;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnFontFamilyChanging(string value);
        partial void OnFontFamilyChanged();
        partial void OnFontSizeChanging(System.Nullable<long> value);
        partial void OnFontSizeChanged();
        partial void OnFontColorChanging(string value);
        partial void OnFontColorChanged();
        partial void OnIsUseondragChanging(System.Nullable<long> value);
        partial void OnIsUseondragChanged();
        partial void OnFontSettingsChanging(byte[] value);
        partial void OnFontSettingsChanged();
        partial void OnDesktopSettingsChanging(byte[] value);
        partial void OnDesktopSettingsChanged();
        partial void OnWidgetSettingsChanging(byte[] value);
        partial void OnWidgetSettingsChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        #endregion

        public UserDefault()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for FontFamily in the schema.
        /// </summary>
        [Column(Name = @"font_family", Storage = "_FontFamily", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FontFamily
        {
            get
            {
                return this._FontFamily;
            }
            set
            {
                if (this._FontFamily != value)
                {
                    this.OnFontFamilyChanging(value);
                    this.SendPropertyChanging();
                    this._FontFamily = value;
                    this.SendPropertyChanged("FontFamily");
                    this.OnFontFamilyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FontSize in the schema.
        /// </summary>
        [Column(Name = @"font_size", Storage = "_FontSize", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> FontSize
        {
            get
            {
                return this._FontSize;
            }
            set
            {
                if (this._FontSize != value)
                {
                    this.OnFontSizeChanging(value);
                    this.SendPropertyChanging();
                    this._FontSize = value;
                    this.SendPropertyChanged("FontSize");
                    this.OnFontSizeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FontColor in the schema.
        /// </summary>
        [Column(Name = @"font_color", Storage = "_FontColor", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FontColor
        {
            get
            {
                return this._FontColor;
            }
            set
            {
                if (this._FontColor != value)
                {
                    this.OnFontColorChanging(value);
                    this.SendPropertyChanging();
                    this._FontColor = value;
                    this.SendPropertyChanged("FontColor");
                    this.OnFontColorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsUseondrag in the schema.
        /// </summary>
        [Column(Name = @"is_useondrag", Storage = "_IsUseondrag", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsUseondrag
        {
            get
            {
                return this._IsUseondrag;
            }
            set
            {
                if (this._IsUseondrag != value)
                {
                    this.OnIsUseondragChanging(value);
                    this.SendPropertyChanging();
                    this._IsUseondrag = value;
                    this.SendPropertyChanged("IsUseondrag");
                    this.OnIsUseondragChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FontSettings in the schema.
        /// </summary>
        [Column(Name = @"font_settings", Storage = "_FontSettings", DbType = "BLOB", UpdateCheck = UpdateCheck.Never)]
        public byte[] FontSettings
        {
            get
            {
                return this._FontSettings;
            }
            set
            {
                if (this._FontSettings != value)
                {
                    this.OnFontSettingsChanging(value);
                    this.SendPropertyChanging();
                    this._FontSettings = value;
                    this.SendPropertyChanged("FontSettings");
                    this.OnFontSettingsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DesktopSettings in the schema.
        /// </summary>
        [Column(Name = @"desktop_settings", Storage = "_DesktopSettings", DbType = "BLOB", UpdateCheck = UpdateCheck.Never)]
        public byte[] DesktopSettings
        {
            get
            {
                return this._DesktopSettings;
            }
            set
            {
                if (this._DesktopSettings != value)
                {
                    this.OnDesktopSettingsChanging(value);
                    this.SendPropertyChanging();
                    this._DesktopSettings = value;
                    this.SendPropertyChanged("DesktopSettings");
                    this.OnDesktopSettingsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WidgetSettings in the schema.
        /// </summary>
        [Column(Name = @"widget_settings", Storage = "_WidgetSettings", DbType = "BLOB", UpdateCheck = UpdateCheck.Never)]
        public byte[] WidgetSettings
        {
            get
            {
                return this._WidgetSettings;
            }
            set
            {
                if (this._WidgetSettings != value)
                {
                    this.OnWidgetSettingsChanging(value);
                    this.SendPropertyChanging();
                    this._WidgetSettings = value;
                    this.SendPropertyChanged("WidgetSettings");
                    this.OnWidgetSettingsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.UserPackage in the schema.
    /// </summary>
    [Table(Name = @"""main"".user_package")]
    public partial class UserPackage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _PackageAttr = @"None";

        private string _PackageValue = @"None";
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPackageAttrChanging(string value);
        partial void OnPackageAttrChanged();
        partial void OnPackageValueChanging(string value);
        partial void OnPackageValueChanged();
        #endregion

        public UserPackage()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for PackageAttr in the schema.
        /// </summary>
        [Column(Name = @"package_attr", Storage = "_PackageAttr", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string PackageAttr
        {
            get
            {
                return this._PackageAttr;
            }
            set
            {
                if (this._PackageAttr != value)
                {
                    this.OnPackageAttrChanging(value);
                    this.SendPropertyChanging();
                    this._PackageAttr = value;
                    this.SendPropertyChanged("PackageAttr");
                    this.OnPackageAttrChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackageValue in the schema.
        /// </summary>
        [Column(Name = @"package_value", Storage = "_PackageValue", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string PackageValue
        {
            get
            {
                return this._PackageValue;
            }
            set
            {
                if (this._PackageValue != value)
                {
                    this.OnPackageValueChanging(value);
                    this.SendPropertyChanging();
                    this._PackageValue = value;
                    this.SendPropertyChanged("PackageValue");
                    this.OnPackageValueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.WitAttachment in the schema.
    /// </summary>
    [Table(Name = @"""main"".wit_attachments")]
    public partial class WitAttachment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private object _Id;

        private string _FileId;

        private string _FileAssociationId;

        private string _WitId;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _IsInline = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(object value);
        partial void OnIdChanged();
        partial void OnFileIdChanging(string value);
        partial void OnFileIdChanged();
        partial void OnFileAssociationIdChanging(string value);
        partial void OnFileAssociationIdChanged();
        partial void OnWitIdChanging(string value);
        partial void OnWitIdChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnIsInlineChanging(System.Nullable<long> value);
        partial void OnIsInlineChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        #endregion

        public WitAttachment()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", DbType = "INTEGER ASC", UpdateCheck = UpdateCheck.Never)]
        public object Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FileId in the schema.
        /// </summary>
        [Column(Name = @"file_id", Storage = "_FileId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string FileId
        {
            get
            {
                return this._FileId;
            }
            set
            {
                if (this._FileId != value)
                {
                    this.OnFileIdChanging(value);
                    this.SendPropertyChanging();
                    this._FileId = value;
                    this.SendPropertyChanged("FileId");
                    this.OnFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FileAssociationId in the schema.
        /// </summary>
        [Column(Name = @"file_association_id", Storage = "_FileAssociationId", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FileAssociationId
        {
            get
            {
                return this._FileAssociationId;
            }
            set
            {
                if (this._FileAssociationId != value)
                {
                    this.OnFileAssociationIdChanging(value);
                    this.SendPropertyChanging();
                    this._FileAssociationId = value;
                    this.SendPropertyChanged("FileAssociationId");
                    this.OnFileAssociationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitId in the schema.
        /// </summary>
        [Column(Name = @"wit_id", Storage = "_WitId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string WitId
        {
            get
            {
                return this._WitId;
            }
            set
            {
                if (this._WitId != value)
                {
                    this.OnWitIdChanging(value);
                    this.SendPropertyChanging();
                    this._WitId = value;
                    this.SendPropertyChanged("WitId");
                    this.OnWitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsInline in the schema.
        /// </summary>
        [Column(Name = @"is_inline", Storage = "_IsInline", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsInline
        {
            get
            {
                return this._IsInline;
            }
            set
            {
                if (this._IsInline != value)
                {
                    this.OnIsInlineChanging(value);
                    this.SendPropertyChanging();
                    this._IsInline = value;
                    this.SendPropertyChanged("IsInline");
                    this.OnIsInlineChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.WitTag in the schema.
    /// </summary>
    [Table(Name = @"""main"".wit_tags")]
    public partial class WitTag : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private object _Id;

        private string _TagId;

        private string _WitId;

        private System.Nullable<long> _SyncStatus = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(object value);
        partial void OnIdChanged();
        partial void OnTagIdChanging(string value);
        partial void OnTagIdChanged();
        partial void OnWitIdChanging(string value);
        partial void OnWitIdChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        #endregion

        public WitTag()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", DbType = "INTEGER ASC", UpdateCheck = UpdateCheck.Never)]
        public object Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TagId in the schema.
        /// </summary>
        [Column(Name = @"tag_id", Storage = "_TagId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string TagId
        {
            get
            {
                return this._TagId;
            }
            set
            {
                if (this._TagId != value)
                {
                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitId in the schema.
        /// </summary>
        [Column(Name = @"wit_id", Storage = "_WitId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string WitId
        {
            get
            {
                return this._WitId;
            }
            set
            {
                if (this._WitId != value)
                {
                    this.OnWitIdChanging(value);
                    this.SendPropertyChanging();
                    this._WitId = value;
                    this.SendPropertyChanged("WitId");
                    this.OnWitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Wit in the schema.
    /// </summary>
    [Table(Name = @"""main"".wits")]
    public partial class Wit : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _WitId;

        private string _WitName;

        private byte[] _WitContent;

        private string _WitDesc;

        private string _WitStatus;

        private string _WitTags;

        private System.Nullable<long> _WitFvrts = 0;

        private System.Nullable<long> _WitSize = 0;

        private string _WitNotes;

        private string _ModificationDate;

        private string _CreationDate;

        private string _Creator;

        private string _Modifier;

        private string _Company;

        private string _LastUsed;

        private System.Nullable<long> _NumUsed = 0;

        private string _LinkId;

        private string _FolderId;

        private System.Nullable<long> _FolderType = 0;

        private System.Nullable<long> _WidgetType = 0;

        private System.Nullable<long> _FilesCount = 0;

        private System.Nullable<long> _InlineCount = 0;

        private System.Nullable<double> _Version = 0;

        private System.Nullable<long> _Permission = 0;

        private System.Nullable<long> _CanFurtherPerm = 0;

        private System.Nullable<long> _Label = 0;

        private System.Nullable<long> _Ratingtotal = 0;

        private System.Nullable<long> _Ratingcount = 0;

        private System.Nullable<long> _SyncStatus = 0;

        private string _FullText;

        private System.Nullable<long> _IsSharedbyme = 0;

        private System.Nullable<long> _ErrorType = 0;

        private System.Nullable<long> _ErrorCode = 0;

        private System.Nullable<long> _RetryCount = 0;

        private string _UpdateMessage;

        private string _ComboWits;

        private string _RelatedWits;

        private string _ExpiryDate;

        private string _FirstAlertDate;

        private string _SecondAlertDate;

        private string _LocalSyncPath;

        private byte[] _LoggedInUserPermission;

        private string _WorkspaceId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnWitIdChanging(string value);
        partial void OnWitIdChanged();
        partial void OnWitNameChanging(string value);
        partial void OnWitNameChanged();
        partial void OnWitContentChanging(byte[] value);
        partial void OnWitContentChanged();
        partial void OnWitDescChanging(string value);
        partial void OnWitDescChanged();
        partial void OnWitStatusChanging(string value);
        partial void OnWitStatusChanged();
        partial void OnWitTagsChanging(string value);
        partial void OnWitTagsChanged();
        partial void OnWitFvrtsChanging(System.Nullable<long> value);
        partial void OnWitFvrtsChanged();
        partial void OnWitSizeChanging(System.Nullable<long> value);
        partial void OnWitSizeChanged();
        partial void OnWitNotesChanging(string value);
        partial void OnWitNotesChanged();
        partial void OnModificationDateChanging(string value);
        partial void OnModificationDateChanged();
        partial void OnCreationDateChanging(string value);
        partial void OnCreationDateChanged();
        partial void OnCreatorChanging(string value);
        partial void OnCreatorChanged();
        partial void OnModifierChanging(string value);
        partial void OnModifierChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnLastUsedChanging(string value);
        partial void OnLastUsedChanged();
        partial void OnNumUsedChanging(System.Nullable<long> value);
        partial void OnNumUsedChanged();
        partial void OnLinkIdChanging(string value);
        partial void OnLinkIdChanged();
        partial void OnFolderIdChanging(string value);
        partial void OnFolderIdChanged();
        partial void OnFolderTypeChanging(System.Nullable<long> value);
        partial void OnFolderTypeChanged();
        partial void OnWidgetTypeChanging(System.Nullable<long> value);
        partial void OnWidgetTypeChanged();
        partial void OnFilesCountChanging(System.Nullable<long> value);
        partial void OnFilesCountChanged();
        partial void OnInlineCountChanging(System.Nullable<long> value);
        partial void OnInlineCountChanged();
        partial void OnVersionChanging(System.Nullable<double> value);
        partial void OnVersionChanged();
        partial void OnPermissionChanging(System.Nullable<long> value);
        partial void OnPermissionChanged();
        partial void OnCanFurtherPermChanging(System.Nullable<long> value);
        partial void OnCanFurtherPermChanged();
        partial void OnLabelChanging(System.Nullable<long> value);
        partial void OnLabelChanged();
        partial void OnRatingtotalChanging(System.Nullable<long> value);
        partial void OnRatingtotalChanged();
        partial void OnRatingcountChanging(System.Nullable<long> value);
        partial void OnRatingcountChanged();
        partial void OnSyncStatusChanging(System.Nullable<long> value);
        partial void OnSyncStatusChanged();
        partial void OnFullTextChanging(string value);
        partial void OnFullTextChanged();
        partial void OnIsSharedbymeChanging(System.Nullable<long> value);
        partial void OnIsSharedbymeChanged();
        partial void OnErrorTypeChanging(System.Nullable<long> value);
        partial void OnErrorTypeChanged();
        partial void OnErrorCodeChanging(System.Nullable<long> value);
        partial void OnErrorCodeChanged();
        partial void OnRetryCountChanging(System.Nullable<long> value);
        partial void OnRetryCountChanged();
        partial void OnUpdateMessageChanging(string value);
        partial void OnUpdateMessageChanged();
        partial void OnComboWitsChanging(string value);
        partial void OnComboWitsChanged();
        partial void OnRelatedWitsChanging(string value);
        partial void OnRelatedWitsChanged();
        partial void OnExpiryDateChanging(string value);
        partial void OnExpiryDateChanged();
        partial void OnFirstAlertDateChanging(string value);
        partial void OnFirstAlertDateChanged();
        partial void OnSecondAlertDateChanging(string value);
        partial void OnSecondAlertDateChanged();
        partial void OnLocalSyncPathChanging(string value);
        partial void OnLocalSyncPathChanged();
        partial void OnLoggedInUserPermissionChanging(byte[] value);
        partial void OnLoggedInUserPermissionChanged();
        partial void OnWorkspaceIdChanging(string value);
        partial void OnWorkspaceIdChanged();
        #endregion

        public Wit()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for WitId in the schema.
        /// </summary>
        [Column(Name = @"wit_id", Storage = "_WitId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string WitId
        {
            get
            {
                return this._WitId;
            }
            set
            {
                if (this._WitId != value)
                {
                    this.OnWitIdChanging(value);
                    this.SendPropertyChanging();
                    this._WitId = value;
                    this.SendPropertyChanged("WitId");
                    this.OnWitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitName in the schema.
        /// </summary>
        [Column(Name = @"wit_name", Storage = "_WitName", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string WitName
        {
            get
            {
                return this._WitName;
            }
            set
            {
                if (this._WitName != value)
                {
                    this.OnWitNameChanging(value);
                    this.SendPropertyChanging();
                    this._WitName = value;
                    this.SendPropertyChanged("WitName");
                    this.OnWitNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitContent in the schema.
        /// </summary>
        [Column(Name = @"wit_content", Storage = "_WitContent", DbType = "BLOB", UpdateCheck = UpdateCheck.Never)]
        public byte[] WitContent
        {
            get
            {
                return this._WitContent;
            }
            set
            {
                if (this._WitContent != value)
                {
                    this.OnWitContentChanging(value);
                    this.SendPropertyChanging();
                    this._WitContent = value;
                    this.SendPropertyChanged("WitContent");
                    this.OnWitContentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitDesc in the schema.
        /// </summary>
        [Column(Name = @"wit_desc", Storage = "_WitDesc", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string WitDesc
        {
            get
            {
                return this._WitDesc;
            }
            set
            {
                if (this._WitDesc != value)
                {
                    this.OnWitDescChanging(value);
                    this.SendPropertyChanging();
                    this._WitDesc = value;
                    this.SendPropertyChanged("WitDesc");
                    this.OnWitDescChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitStatus in the schema.
        /// </summary>
        [Column(Name = @"wit_status", Storage = "_WitStatus", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string WitStatus
        {
            get
            {
                return this._WitStatus;
            }
            set
            {
                if (this._WitStatus != value)
                {
                    this.OnWitStatusChanging(value);
                    this.SendPropertyChanging();
                    this._WitStatus = value;
                    this.SendPropertyChanged("WitStatus");
                    this.OnWitStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitTags in the schema.
        /// </summary>
        [Column(Name = @"wit_tags", Storage = "_WitTags", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string WitTags
        {
            get
            {
                return this._WitTags;
            }
            set
            {
                if (this._WitTags != value)
                {
                    this.OnWitTagsChanging(value);
                    this.SendPropertyChanging();
                    this._WitTags = value;
                    this.SendPropertyChanged("WitTags");
                    this.OnWitTagsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitFvrts in the schema.
        /// </summary>
        [Column(Name = @"wit_fvrts", Storage = "_WitFvrts", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> WitFvrts
        {
            get
            {
                return this._WitFvrts;
            }
            set
            {
                if (this._WitFvrts != value)
                {
                    this.OnWitFvrtsChanging(value);
                    this.SendPropertyChanging();
                    this._WitFvrts = value;
                    this.SendPropertyChanged("WitFvrts");
                    this.OnWitFvrtsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitSize in the schema.
        /// </summary>
        [Column(Name = @"wit_size", Storage = "_WitSize", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> WitSize
        {
            get
            {
                return this._WitSize;
            }
            set
            {
                if (this._WitSize != value)
                {
                    this.OnWitSizeChanging(value);
                    this.SendPropertyChanging();
                    this._WitSize = value;
                    this.SendPropertyChanged("WitSize");
                    this.OnWitSizeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WitNotes in the schema.
        /// </summary>
        [Column(Name = @"wit_notes", Storage = "_WitNotes", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string WitNotes
        {
            get
            {
                return this._WitNotes;
            }
            set
            {
                if (this._WitNotes != value)
                {
                    this.OnWitNotesChanging(value);
                    this.SendPropertyChanging();
                    this._WitNotes = value;
                    this.SendPropertyChanged("WitNotes");
                    this.OnWitNotesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModificationDate in the schema.
        /// </summary>
        [Column(Name = @"modification_date", Storage = "_ModificationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ModificationDate
        {
            get
            {
                return this._ModificationDate;
            }
            set
            {
                if (this._ModificationDate != value)
                {
                    this.OnModificationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModificationDate = value;
                    this.SendPropertyChanged("ModificationDate");
                    this.OnModificationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreationDate in the schema.
        /// </summary>
        [Column(Name = @"creation_date", Storage = "_CreationDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string CreationDate
        {
            get
            {
                return this._CreationDate;
            }
            set
            {
                if (this._CreationDate != value)
                {
                    this.OnCreationDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreationDate = value;
                    this.SendPropertyChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Creator in the schema.
        /// </summary>
        [Column(Name = @"creator", Storage = "_Creator", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Creator
        {
            get
            {
                return this._Creator;
            }
            set
            {
                if (this._Creator != value)
                {
                    this.OnCreatorChanging(value);
                    this.SendPropertyChanging();
                    this._Creator = value;
                    this.SendPropertyChanged("Creator");
                    this.OnCreatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modifier in the schema.
        /// </summary>
        [Column(Name = @"modifier", Storage = "_Modifier", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Modifier
        {
            get
            {
                return this._Modifier;
            }
            set
            {
                if (this._Modifier != value)
                {
                    this.OnModifierChanging(value);
                    this.SendPropertyChanging();
                    this._Modifier = value;
                    this.SendPropertyChanged("Modifier");
                    this.OnModifierChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Name = @"company", Storage = "_Company", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUsed in the schema.
        /// </summary>
        [Column(Name = @"last_used", Storage = "_LastUsed", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string LastUsed
        {
            get
            {
                return this._LastUsed;
            }
            set
            {
                if (this._LastUsed != value)
                {
                    this.OnLastUsedChanging(value);
                    this.SendPropertyChanging();
                    this._LastUsed = value;
                    this.SendPropertyChanged("LastUsed");
                    this.OnLastUsedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumUsed in the schema.
        /// </summary>
        [Column(Name = @"num_used", Storage = "_NumUsed", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> NumUsed
        {
            get
            {
                return this._NumUsed;
            }
            set
            {
                if (this._NumUsed != value)
                {
                    this.OnNumUsedChanging(value);
                    this.SendPropertyChanging();
                    this._NumUsed = value;
                    this.SendPropertyChanged("NumUsed");
                    this.OnNumUsedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LinkId in the schema.
        /// </summary>
        [Column(Name = @"link_id", Storage = "_LinkId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string LinkId
        {
            get
            {
                return this._LinkId;
            }
            set
            {
                if (this._LinkId != value)
                {
                    this.OnLinkIdChanging(value);
                    this.SendPropertyChanging();
                    this._LinkId = value;
                    this.SendPropertyChanged("LinkId");
                    this.OnLinkIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderId in the schema.
        /// </summary>
        [Column(Name = @"folder_id", Storage = "_FolderId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FolderId
        {
            get
            {
                return this._FolderId;
            }
            set
            {
                if (this._FolderId != value)
                {
                    this.OnFolderIdChanging(value);
                    this.SendPropertyChanging();
                    this._FolderId = value;
                    this.SendPropertyChanged("FolderId");
                    this.OnFolderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderType in the schema.
        /// </summary>
        [Column(Name = @"folder_type", Storage = "_FolderType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> FolderType
        {
            get
            {
                return this._FolderType;
            }
            set
            {
                if (this._FolderType != value)
                {
                    this.OnFolderTypeChanging(value);
                    this.SendPropertyChanging();
                    this._FolderType = value;
                    this.SendPropertyChanged("FolderType");
                    this.OnFolderTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WidgetType in the schema.
        /// </summary>
        [Column(Name = @"widget_type", Storage = "_WidgetType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> WidgetType
        {
            get
            {
                return this._WidgetType;
            }
            set
            {
                if (this._WidgetType != value)
                {
                    this.OnWidgetTypeChanging(value);
                    this.SendPropertyChanging();
                    this._WidgetType = value;
                    this.SendPropertyChanged("WidgetType");
                    this.OnWidgetTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilesCount in the schema.
        /// </summary>
        [Column(Name = @"files_count", Storage = "_FilesCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> FilesCount
        {
            get
            {
                return this._FilesCount;
            }
            set
            {
                if (this._FilesCount != value)
                {
                    this.OnFilesCountChanging(value);
                    this.SendPropertyChanging();
                    this._FilesCount = value;
                    this.SendPropertyChanged("FilesCount");
                    this.OnFilesCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InlineCount in the schema.
        /// </summary>
        [Column(Name = @"inline_count", Storage = "_InlineCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> InlineCount
        {
            get
            {
                return this._InlineCount;
            }
            set
            {
                if (this._InlineCount != value)
                {
                    this.OnInlineCountChanging(value);
                    this.SendPropertyChanging();
                    this._InlineCount = value;
                    this.SendPropertyChanged("InlineCount");
                    this.OnInlineCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", DbType = "REAL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Permission in the schema.
        /// </summary>
        [Column(Name = @"permission", Storage = "_Permission", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Permission
        {
            get
            {
                return this._Permission;
            }
            set
            {
                if (this._Permission != value)
                {
                    this.OnPermissionChanging(value);
                    this.SendPropertyChanging();
                    this._Permission = value;
                    this.SendPropertyChanged("Permission");
                    this.OnPermissionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CanFurtherPerm in the schema.
        /// </summary>
        [Column(Name = @"can_further_perm", Storage = "_CanFurtherPerm", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> CanFurtherPerm
        {
            get
            {
                return this._CanFurtherPerm;
            }
            set
            {
                if (this._CanFurtherPerm != value)
                {
                    this.OnCanFurtherPermChanging(value);
                    this.SendPropertyChanging();
                    this._CanFurtherPerm = value;
                    this.SendPropertyChanged("CanFurtherPerm");
                    this.OnCanFurtherPermChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Label in the schema.
        /// </summary>
        [Column(Name = @"label", Storage = "_Label", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Label
        {
            get
            {
                return this._Label;
            }
            set
            {
                if (this._Label != value)
                {
                    this.OnLabelChanging(value);
                    this.SendPropertyChanging();
                    this._Label = value;
                    this.SendPropertyChanged("Label");
                    this.OnLabelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ratingtotal in the schema.
        /// </summary>
        [Column(Name = @"ratingtotal", Storage = "_Ratingtotal", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Ratingtotal
        {
            get
            {
                return this._Ratingtotal;
            }
            set
            {
                if (this._Ratingtotal != value)
                {
                    this.OnRatingtotalChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingtotal = value;
                    this.SendPropertyChanged("Ratingtotal");
                    this.OnRatingtotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ratingcount in the schema.
        /// </summary>
        [Column(Name = @"ratingcount", Storage = "_Ratingcount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Ratingcount
        {
            get
            {
                return this._Ratingcount;
            }
            set
            {
                if (this._Ratingcount != value)
                {
                    this.OnRatingcountChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingcount = value;
                    this.SendPropertyChanged("Ratingcount");
                    this.OnRatingcountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SyncStatus in the schema.
        /// </summary>
        [Column(Name = @"sync_status", Storage = "_SyncStatus", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SyncStatus
        {
            get
            {
                return this._SyncStatus;
            }
            set
            {
                if (this._SyncStatus != value)
                {
                    this.OnSyncStatusChanging(value);
                    this.SendPropertyChanging();
                    this._SyncStatus = value;
                    this.SendPropertyChanged("SyncStatus");
                    this.OnSyncStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FullText in the schema.
        /// </summary>
        [Column(Name = @"full_text", Storage = "_FullText", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string FullText
        {
            get
            {
                return this._FullText;
            }
            set
            {
                if (this._FullText != value)
                {
                    this.OnFullTextChanging(value);
                    this.SendPropertyChanging();
                    this._FullText = value;
                    this.SendPropertyChanged("FullText");
                    this.OnFullTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsSharedbyme in the schema.
        /// </summary>
        [Column(Name = @"is_sharedbyme", Storage = "_IsSharedbyme", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IsSharedbyme
        {
            get
            {
                return this._IsSharedbyme;
            }
            set
            {
                if (this._IsSharedbyme != value)
                {
                    this.OnIsSharedbymeChanging(value);
                    this.SendPropertyChanging();
                    this._IsSharedbyme = value;
                    this.SendPropertyChanged("IsSharedbyme");
                    this.OnIsSharedbymeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorType in the schema.
        /// </summary>
        [Column(Name = @"error_type", Storage = "_ErrorType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorType
        {
            get
            {
                return this._ErrorType;
            }
            set
            {
                if (this._ErrorType != value)
                {
                    this.OnErrorTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorType = value;
                    this.SendPropertyChanged("ErrorType");
                    this.OnErrorTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCode in the schema.
        /// </summary>
        [Column(Name = @"error_code", Storage = "_ErrorCode", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ErrorCode
        {
            get
            {
                return this._ErrorCode;
            }
            set
            {
                if (this._ErrorCode != value)
                {
                    this.OnErrorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCode = value;
                    this.SendPropertyChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RetryCount in the schema.
        /// </summary>
        [Column(Name = @"retry_count", Storage = "_RetryCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RetryCount
        {
            get
            {
                return this._RetryCount;
            }
            set
            {
                if (this._RetryCount != value)
                {
                    this.OnRetryCountChanging(value);
                    this.SendPropertyChanging();
                    this._RetryCount = value;
                    this.SendPropertyChanged("RetryCount");
                    this.OnRetryCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateMessage in the schema.
        /// </summary>
        [Column(Name = @"update_message", Storage = "_UpdateMessage", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string UpdateMessage
        {
            get
            {
                return this._UpdateMessage;
            }
            set
            {
                if (this._UpdateMessage != value)
                {
                    this.OnUpdateMessageChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateMessage = value;
                    this.SendPropertyChanged("UpdateMessage");
                    this.OnUpdateMessageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ComboWits in the schema.
        /// </summary>
        [Column(Name = @"combo_wits", Storage = "_ComboWits", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ComboWits
        {
            get
            {
                return this._ComboWits;
            }
            set
            {
                if (this._ComboWits != value)
                {
                    this.OnComboWitsChanging(value);
                    this.SendPropertyChanging();
                    this._ComboWits = value;
                    this.SendPropertyChanged("ComboWits");
                    this.OnComboWitsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RelatedWits in the schema.
        /// </summary>
        [Column(Name = @"related_wits", Storage = "_RelatedWits", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string RelatedWits
        {
            get
            {
                return this._RelatedWits;
            }
            set
            {
                if (this._RelatedWits != value)
                {
                    this.OnRelatedWitsChanging(value);
                    this.SendPropertyChanging();
                    this._RelatedWits = value;
                    this.SendPropertyChanged("RelatedWits");
                    this.OnRelatedWitsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExpiryDate in the schema.
        /// </summary>
        [Column(Name = @"expiry_date", Storage = "_ExpiryDate", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ExpiryDate
        {
            get
            {
                return this._ExpiryDate;
            }
            set
            {
                if (this._ExpiryDate != value)
                {
                    this.OnExpiryDateChanging(value);
                    this.SendPropertyChanging();
                    this._ExpiryDate = value;
                    this.SendPropertyChanged("ExpiryDate");
                    this.OnExpiryDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstAlertDate in the schema.
        /// </summary>
        [Column(Name = @"first_alert_date", Storage = "_FirstAlertDate", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string FirstAlertDate
        {
            get
            {
                return this._FirstAlertDate;
            }
            set
            {
                if (this._FirstAlertDate != value)
                {
                    this.OnFirstAlertDateChanging(value);
                    this.SendPropertyChanging();
                    this._FirstAlertDate = value;
                    this.SendPropertyChanged("FirstAlertDate");
                    this.OnFirstAlertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SecondAlertDate in the schema.
        /// </summary>
        [Column(Name = @"second_alert_date", Storage = "_SecondAlertDate", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string SecondAlertDate
        {
            get
            {
                return this._SecondAlertDate;
            }
            set
            {
                if (this._SecondAlertDate != value)
                {
                    this.OnSecondAlertDateChanging(value);
                    this.SendPropertyChanging();
                    this._SecondAlertDate = value;
                    this.SendPropertyChanged("SecondAlertDate");
                    this.OnSecondAlertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LocalSyncPath in the schema.
        /// </summary>
        [Column(Name = @"local_sync_path", Storage = "_LocalSyncPath", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string LocalSyncPath
        {
            get
            {
                return this._LocalSyncPath;
            }
            set
            {
                if (this._LocalSyncPath != value)
                {
                    this.OnLocalSyncPathChanging(value);
                    this.SendPropertyChanging();
                    this._LocalSyncPath = value;
                    this.SendPropertyChanged("LocalSyncPath");
                    this.OnLocalSyncPathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoggedInUserPermission in the schema.
        /// </summary>
        [Column(Name = @"loggedIn_user_permission", Storage = "_LoggedInUserPermission", DbType = "BLOB", UpdateCheck = UpdateCheck.Never)]
        public byte[] LoggedInUserPermission
        {
            get
            {
                return this._LoggedInUserPermission;
            }
            set
            {
                if (this._LoggedInUserPermission != value)
                {
                    this.OnLoggedInUserPermissionChanging(value);
                    this.SendPropertyChanging();
                    this._LoggedInUserPermission = value;
                    this.SendPropertyChanged("LoggedInUserPermission");
                    this.OnLoggedInUserPermissionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkspaceId in the schema.
        /// </summary>
        [Column(Name = @"workspace_Id", Storage = "_WorkspaceId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string WorkspaceId
        {
            get
            {
                return this._WorkspaceId;
            }
            set
            {
                if (this._WorkspaceId != value)
                {
                    this.OnWorkspaceIdChanging(value);
                    this.SendPropertyChanging();
                    this._WorkspaceId = value;
                    this.SendPropertyChanged("WorkspaceId");
                    this.OnWorkspaceIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.WitsUsage in the schema.
    /// </summary>
    [Table(Name = @"""main"".wits_usage")]
    public partial class WitsUsage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _WitId;

        private System.Nullable<long> _TextUsed = 0;

        private System.Nullable<long> _FilesUsed = 0;

        private System.Nullable<long> _Days7Used = 0;

        private System.Nullable<long> _Days30Used = 0;

        private System.Nullable<long> _SharedTextUsed = 0;

        private System.Nullable<long> _SharedFilesUsed = 0;

        private System.Nullable<long> _SharedDays7Used = 0;

        private System.Nullable<long> _SharedDays30Used = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnWitIdChanging(string value);
        partial void OnWitIdChanged();
        partial void OnTextUsedChanging(System.Nullable<long> value);
        partial void OnTextUsedChanged();
        partial void OnFilesUsedChanging(System.Nullable<long> value);
        partial void OnFilesUsedChanged();
        partial void OnDays7UsedChanging(System.Nullable<long> value);
        partial void OnDays7UsedChanged();
        partial void OnDays30UsedChanging(System.Nullable<long> value);
        partial void OnDays30UsedChanged();
        partial void OnSharedTextUsedChanging(System.Nullable<long> value);
        partial void OnSharedTextUsedChanged();
        partial void OnSharedFilesUsedChanging(System.Nullable<long> value);
        partial void OnSharedFilesUsedChanged();
        partial void OnSharedDays7UsedChanging(System.Nullable<long> value);
        partial void OnSharedDays7UsedChanged();
        partial void OnSharedDays30UsedChanging(System.Nullable<long> value);
        partial void OnSharedDays30UsedChanged();
        #endregion

        public WitsUsage()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for WitId in the schema.
        /// </summary>
        [Column(Name = @"wit_id", Storage = "_WitId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string WitId
        {
            get
            {
                return this._WitId;
            }
            set
            {
                if (this._WitId != value)
                {
                    this.OnWitIdChanging(value);
                    this.SendPropertyChanging();
                    this._WitId = value;
                    this.SendPropertyChanged("WitId");
                    this.OnWitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TextUsed in the schema.
        /// </summary>
        [Column(Name = @"text_used", Storage = "_TextUsed", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> TextUsed
        {
            get
            {
                return this._TextUsed;
            }
            set
            {
                if (this._TextUsed != value)
                {
                    this.OnTextUsedChanging(value);
                    this.SendPropertyChanging();
                    this._TextUsed = value;
                    this.SendPropertyChanged("TextUsed");
                    this.OnTextUsedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilesUsed in the schema.
        /// </summary>
        [Column(Name = @"files_used", Storage = "_FilesUsed", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> FilesUsed
        {
            get
            {
                return this._FilesUsed;
            }
            set
            {
                if (this._FilesUsed != value)
                {
                    this.OnFilesUsedChanging(value);
                    this.SendPropertyChanging();
                    this._FilesUsed = value;
                    this.SendPropertyChanged("FilesUsed");
                    this.OnFilesUsedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Days7Used in the schema.
        /// </summary>
        [Column(Name = @"days7_used", Storage = "_Days7Used", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Days7Used
        {
            get
            {
                return this._Days7Used;
            }
            set
            {
                if (this._Days7Used != value)
                {
                    this.OnDays7UsedChanging(value);
                    this.SendPropertyChanging();
                    this._Days7Used = value;
                    this.SendPropertyChanged("Days7Used");
                    this.OnDays7UsedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Days30Used in the schema.
        /// </summary>
        [Column(Name = @"days30_used", Storage = "_Days30Used", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Days30Used
        {
            get
            {
                return this._Days30Used;
            }
            set
            {
                if (this._Days30Used != value)
                {
                    this.OnDays30UsedChanging(value);
                    this.SendPropertyChanging();
                    this._Days30Used = value;
                    this.SendPropertyChanged("Days30Used");
                    this.OnDays30UsedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SharedTextUsed in the schema.
        /// </summary>
        [Column(Name = @"shared_text_used", Storage = "_SharedTextUsed", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SharedTextUsed
        {
            get
            {
                return this._SharedTextUsed;
            }
            set
            {
                if (this._SharedTextUsed != value)
                {
                    this.OnSharedTextUsedChanging(value);
                    this.SendPropertyChanging();
                    this._SharedTextUsed = value;
                    this.SendPropertyChanged("SharedTextUsed");
                    this.OnSharedTextUsedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SharedFilesUsed in the schema.
        /// </summary>
        [Column(Name = @"shared_files_used", Storage = "_SharedFilesUsed", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SharedFilesUsed
        {
            get
            {
                return this._SharedFilesUsed;
            }
            set
            {
                if (this._SharedFilesUsed != value)
                {
                    this.OnSharedFilesUsedChanging(value);
                    this.SendPropertyChanging();
                    this._SharedFilesUsed = value;
                    this.SendPropertyChanged("SharedFilesUsed");
                    this.OnSharedFilesUsedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SharedDays7Used in the schema.
        /// </summary>
        [Column(Name = @"shared_days7_used", Storage = "_SharedDays7Used", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SharedDays7Used
        {
            get
            {
                return this._SharedDays7Used;
            }
            set
            {
                if (this._SharedDays7Used != value)
                {
                    this.OnSharedDays7UsedChanging(value);
                    this.SendPropertyChanging();
                    this._SharedDays7Used = value;
                    this.SendPropertyChanged("SharedDays7Used");
                    this.OnSharedDays7UsedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SharedDays30Used in the schema.
        /// </summary>
        [Column(Name = @"shared_days30_used", Storage = "_SharedDays30Used", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SharedDays30Used
        {
            get
            {
                return this._SharedDays30Used;
            }
            set
            {
                if (this._SharedDays30Used != value)
                {
                    this.OnSharedDays30UsedChanging(value);
                    this.SendPropertyChanging();
                    this._SharedDays30Used = value;
                    this.SendPropertyChanged("SharedDays30Used");
                    this.OnSharedDays30UsedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.WitsusagegraphDatum in the schema.
    /// </summary>
    [Table(Name = @"""main"".witsusagegraph_data")]
    public partial class WitsusagegraphDatum : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private System.Nullable<long> _GraphId;

        private System.Nullable<long> _Key;

        private System.Nullable<long> _TtdPersonal;

        private System.Nullable<long> _TtdShared;

        private System.Nullable<long> _TtdEnterprise;

        private System.Nullable<long> _TtdPremium;

        private System.Nullable<long> _TotalWc;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnGraphIdChanging(System.Nullable<long> value);
        partial void OnGraphIdChanged();
        partial void OnKeyChanging(System.Nullable<long> value);
        partial void OnKeyChanged();
        partial void OnTtdPersonalChanging(System.Nullable<long> value);
        partial void OnTtdPersonalChanged();
        partial void OnTtdSharedChanging(System.Nullable<long> value);
        partial void OnTtdSharedChanged();
        partial void OnTtdEnterpriseChanging(System.Nullable<long> value);
        partial void OnTtdEnterpriseChanged();
        partial void OnTtdPremiumChanging(System.Nullable<long> value);
        partial void OnTtdPremiumChanged();
        partial void OnTotalWcChanging(System.Nullable<long> value);
        partial void OnTotalWcChanged();
        #endregion

        public WitsusagegraphDatum()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for GraphId in the schema.
        /// </summary>
        [Column(Name = @"graph_id", Storage = "_GraphId", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> GraphId
        {
            get
            {
                return this._GraphId;
            }
            set
            {
                if (this._GraphId != value)
                {
                    this.OnGraphIdChanging(value);
                    this.SendPropertyChanging();
                    this._GraphId = value;
                    this.SendPropertyChanged("GraphId");
                    this.OnGraphIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Key in the schema.
        /// </summary>
        [Column(Name = @"""key""", Storage = "_Key", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Key
        {
            get
            {
                return this._Key;
            }
            set
            {
                if (this._Key != value)
                {
                    this.OnKeyChanging(value);
                    this.SendPropertyChanging();
                    this._Key = value;
                    this.SendPropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TtdPersonal in the schema.
        /// </summary>
        [Column(Name = @"ttd_personal", Storage = "_TtdPersonal", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> TtdPersonal
        {
            get
            {
                return this._TtdPersonal;
            }
            set
            {
                if (this._TtdPersonal != value)
                {
                    this.OnTtdPersonalChanging(value);
                    this.SendPropertyChanging();
                    this._TtdPersonal = value;
                    this.SendPropertyChanged("TtdPersonal");
                    this.OnTtdPersonalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TtdShared in the schema.
        /// </summary>
        [Column(Name = @"ttd_shared", Storage = "_TtdShared", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> TtdShared
        {
            get
            {
                return this._TtdShared;
            }
            set
            {
                if (this._TtdShared != value)
                {
                    this.OnTtdSharedChanging(value);
                    this.SendPropertyChanging();
                    this._TtdShared = value;
                    this.SendPropertyChanged("TtdShared");
                    this.OnTtdSharedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TtdEnterprise in the schema.
        /// </summary>
        [Column(Name = @"ttd_enterprise", Storage = "_TtdEnterprise", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> TtdEnterprise
        {
            get
            {
                return this._TtdEnterprise;
            }
            set
            {
                if (this._TtdEnterprise != value)
                {
                    this.OnTtdEnterpriseChanging(value);
                    this.SendPropertyChanging();
                    this._TtdEnterprise = value;
                    this.SendPropertyChanged("TtdEnterprise");
                    this.OnTtdEnterpriseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TtdPremium in the schema.
        /// </summary>
        [Column(Name = @"ttd_premium", Storage = "_TtdPremium", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> TtdPremium
        {
            get
            {
                return this._TtdPremium;
            }
            set
            {
                if (this._TtdPremium != value)
                {
                    this.OnTtdPremiumChanging(value);
                    this.SendPropertyChanging();
                    this._TtdPremium = value;
                    this.SendPropertyChanged("TtdPremium");
                    this.OnTtdPremiumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalWc in the schema.
        /// </summary>
        [Column(Name = @"total_wc", Storage = "_TotalWc", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> TotalWc
        {
            get
            {
                return this._TotalWc;
            }
            set
            {
                if (this._TotalWc != value)
                {
                    this.OnTotalWcChanging(value);
                    this.SendPropertyChanging();
                    this._TotalWc = value;
                    this.SendPropertyChanged("TotalWc");
                    this.OnTotalWcChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.WitsUsagegraph in the schema.
    /// </summary>
    [Table(Name = @"""main"".wits_usagegraphs")]
    public partial class WitsUsagegraph : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _FromDate;

        private string _ToDate;

        private string _StepSize;

        private System.Nullable<long> _NumData;

        private System.Nullable<long> _StartOffset;

        private string _Type;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnFromDateChanging(string value);
        partial void OnFromDateChanged();
        partial void OnToDateChanging(string value);
        partial void OnToDateChanged();
        partial void OnStepSizeChanging(string value);
        partial void OnStepSizeChanged();
        partial void OnNumDataChanging(System.Nullable<long> value);
        partial void OnNumDataChanged();
        partial void OnStartOffsetChanging(System.Nullable<long> value);
        partial void OnStartOffsetChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public WitsUsagegraph()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for FromDate in the schema.
        /// </summary>
        [Column(Name = @"from_date", Storage = "_FromDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if (this._FromDate != value)
                {
                    this.OnFromDateChanging(value);
                    this.SendPropertyChanging();
                    this._FromDate = value;
                    this.SendPropertyChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToDate in the schema.
        /// </summary>
        [Column(Name = @"to_date", Storage = "_ToDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if (this._ToDate != value)
                {
                    this.OnToDateChanging(value);
                    this.SendPropertyChanging();
                    this._ToDate = value;
                    this.SendPropertyChanged("ToDate");
                    this.OnToDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StepSize in the schema.
        /// </summary>
        [Column(Name = @"step_size", Storage = "_StepSize", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string StepSize
        {
            get
            {
                return this._StepSize;
            }
            set
            {
                if (this._StepSize != value)
                {
                    this.OnStepSizeChanging(value);
                    this.SendPropertyChanging();
                    this._StepSize = value;
                    this.SendPropertyChanged("StepSize");
                    this.OnStepSizeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumData in the schema.
        /// </summary>
        [Column(Name = @"num_data", Storage = "_NumData", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> NumData
        {
            get
            {
                return this._NumData;
            }
            set
            {
                if (this._NumData != value)
                {
                    this.OnNumDataChanging(value);
                    this.SendPropertyChanging();
                    this._NumData = value;
                    this.SendPropertyChanged("NumData");
                    this.OnNumDataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartOffset in the schema.
        /// </summary>
        [Column(Name = @"start_offset", Storage = "_StartOffset", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> StartOffset
        {
            get
            {
                return this._StartOffset;
            }
            set
            {
                if (this._StartOffset != value)
                {
                    this.OnStartOffsetChanging(value);
                    this.SendPropertyChanging();
                    this._StartOffset = value;
                    this.SendPropertyChanged("StartOffset");
                    this.OnStartOffsetChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Userworkspace in the schema.
    /// </summary>
    [Table(Name = @"""main"".userworkspaces")]
    public partial class Userworkspace : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _WorkspaceId;

        private string _Name;

        private string _EnterpriseId;

        private System.Nullable<long> _SequenceNumber;

        private string _Description;

        private string _CreatedDate;

        private string _ModifiedDate;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnWorkspaceIdChanging(string value);
        partial void OnWorkspaceIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnEnterpriseIdChanging(string value);
        partial void OnEnterpriseIdChanged();
        partial void OnSequenceNumberChanging(System.Nullable<long> value);
        partial void OnSequenceNumberChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreatedDateChanging(string value);
        partial void OnCreatedDateChanged();
        partial void OnModifiedDateChanging(string value);
        partial void OnModifiedDateChanged();
        #endregion

        public Userworkspace()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for WorkspaceId in the schema.
        /// </summary>
        [Column(Name = @"workspace_id", Storage = "_WorkspaceId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string WorkspaceId
        {
            get
            {
                return this._WorkspaceId;
            }
            set
            {
                if (this._WorkspaceId != value)
                {
                    this.OnWorkspaceIdChanging(value);
                    this.SendPropertyChanging();
                    this._WorkspaceId = value;
                    this.SendPropertyChanged("WorkspaceId");
                    this.OnWorkspaceIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnterpriseId in the schema.
        /// </summary>
        [Column(Name = @"enterpriseId", Storage = "_EnterpriseId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string EnterpriseId
        {
            get
            {
                return this._EnterpriseId;
            }
            set
            {
                if (this._EnterpriseId != value)
                {
                    this.OnEnterpriseIdChanging(value);
                    this.SendPropertyChanging();
                    this._EnterpriseId = value;
                    this.SendPropertyChanged("EnterpriseId");
                    this.OnEnterpriseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SequenceNumber in the schema.
        /// </summary>
        [Column(Name = @"sequenceNumber", Storage = "_SequenceNumber", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> SequenceNumber
        {
            get
            {
                return this._SequenceNumber;
            }
            set
            {
                if (this._SequenceNumber != value)
                {
                    this.OnSequenceNumberChanging(value);
                    this.SendPropertyChanging();
                    this._SequenceNumber = value;
                    this.SendPropertyChanged("SequenceNumber");
                    this.OnSequenceNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreatedDate in the schema.
        /// </summary>
        [Column(Name = @"createdDate", Storage = "_CreatedDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModifiedDate in the schema.
        /// </summary>
        [Column(Name = @"modifiedDate", Storage = "_ModifiedDate", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ModifiedDate
        {
            get
            {
                return this._ModifiedDate;
            }
            set
            {
                if (this._ModifiedDate != value)
                {
                    this.OnModifiedDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModifiedDate = value;
                    this.SendPropertyChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Createdby in the schema.
    /// </summary>
    [Table(Name = @"""main"".createdby")]
    public partial class Createdby : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CreatedbyId;

        private string _FirstName;

        private string _LastName;

        private string _Email;

        private string _ElementType;

        private string _ElementTypeId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCreatedbyIdChanging(string value);
        partial void OnCreatedbyIdChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnElementTypeChanging(string value);
        partial void OnElementTypeChanged();
        partial void OnElementTypeIdChanging(string value);
        partial void OnElementTypeIdChanged();
        #endregion

        public Createdby()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CreatedbyId in the schema.
        /// </summary>
        [Column(Name = @"createdby_id", Storage = "_CreatedbyId", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string CreatedbyId
        {
            get
            {
                return this._CreatedbyId;
            }
            set
            {
                if (this._CreatedbyId != value)
                {
                    this.OnCreatedbyIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedbyId = value;
                    this.SendPropertyChanged("CreatedbyId");
                    this.OnCreatedbyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Name = @"firstName", Storage = "_FirstName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Name = @"lastName", Storage = "_LastName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ElementType in the schema.
        /// </summary>
        [Column(Name = @"elementType", Storage = "_ElementType", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ElementType
        {
            get
            {
                return this._ElementType;
            }
            set
            {
                if (this._ElementType != value)
                {
                    this.OnElementTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ElementType = value;
                    this.SendPropertyChanged("ElementType");
                    this.OnElementTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ElementTypeId in the schema.
        /// </summary>
        [Column(Name = @"elementTypeId", Storage = "_ElementTypeId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ElementTypeId
        {
            get
            {
                return this._ElementTypeId;
            }
            set
            {
                if (this._ElementTypeId != value)
                {
                    this.OnElementTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._ElementTypeId = value;
                    this.SendPropertyChanged("ElementTypeId");
                    this.OnElementTypeIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Modifiedby in the schema.
    /// </summary>
    [Table(Name = @"""main"".modifiedby")]
    public partial class Modifiedby : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Id;

        private string _FirstName;

        private string _LastName;

        private string _Email;

        private string _ElementType;

        private string _ElementTypeId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnElementTypeChanging(string value);
        partial void OnElementTypeChanged();
        partial void OnElementTypeIdChanging(string value);
        partial void OnElementTypeIdChanged();
        #endregion

        public Modifiedby()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Name = @"firstName", Storage = "_FirstName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Name = @"lastName", Storage = "_LastName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ElementType in the schema.
        /// </summary>
        [Column(Name = @"elementType", Storage = "_ElementType", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ElementType
        {
            get
            {
                return this._ElementType;
            }
            set
            {
                if (this._ElementType != value)
                {
                    this.OnElementTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ElementType = value;
                    this.SendPropertyChanged("ElementType");
                    this.OnElementTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ElementTypeId in the schema.
        /// </summary>
        [Column(Name = @"elementTypeId", Storage = "_ElementTypeId", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ElementTypeId
        {
            get
            {
                return this._ElementTypeId;
            }
            set
            {
                if (this._ElementTypeId != value)
                {
                    this.OnElementTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._ElementTypeId = value;
                    this.SendPropertyChanged("ElementTypeId");
                    this.OnElementTypeIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for UserContext.Permission in the schema.
    /// </summary>
    [Table(Name = @"""main"".permission")]
    public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Code;

        private string _Name;

        private string _Description;

        private string _Authority;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnAuthorityChanging(string value);
        partial void OnAuthorityChanged();
        #endregion

        public Permission()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Authority in the schema.
        /// </summary>
        [Column(Name = @"authority", Storage = "_Authority", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Authority
        {
            get
            {
                return this._Authority;
            }
            set
            {
                if (this._Authority != value)
                {
                    this.OnAuthorityChanging(value);
                    this.SendPropertyChanging();
                    this._Authority = value;
                    this.SendPropertyChanged("Authority");
                    this.OnAuthorityChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
